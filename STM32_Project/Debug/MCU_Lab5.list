
MCU_Lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002ad4  08002ad4  00012ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002af8  08002af8  000200c8  2**0
                  CONTENTS
  4 .ARM          00000000  08002af8  08002af8  000200c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002af8  08002af8  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002af8  08002af8  00012af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002afc  08002afc  00012afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08002b00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  200000c8  08002bc8  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08002bc8  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000adeb  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002039  00000000  00000000  0002aedc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  0002cf18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a20  00000000  00000000  0002da50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179f5  00000000  00000000  0002e470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c8b0  00000000  00000000  00045e65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085fd3  00000000  00000000  00052715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d86e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e10  00000000  00000000  000d873c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c8 	.word	0x200000c8
 8000128:	00000000 	.word	0x00000000
 800012c:	08002abc 	.word	0x08002abc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000cc 	.word	0x200000cc
 8000148:	08002abc 	.word	0x08002abc

0800014c <isButtonPressed>:
int KeyReg3[MAX_BUTTON] = {NORMAL_STATE};

int TimeOutForKeyPress[MAX_BUTTON] = {200};
int button_flag[MAX_BUTTON] = {0};

int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	200000e4 	.word	0x200000e4

08000180 <subKeyProcess>:

void subKeyProcess(int index){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	//TODO
//	HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
	button_flag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	200000e4 	.word	0x200000e4

080001a0 <getKeyInput>:

void getKeyInput(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for(int i=0; i<MAX_BUTTON; i++){
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e076      	b.n	800029a <getKeyInput+0xfa>
	  KeyReg0[i] = KeyReg1[i];
 80001ac:	4a3f      	ldr	r2, [pc, #252]	; (80002ac <getKeyInput+0x10c>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	493e      	ldr	r1, [pc, #248]	; (80002b0 <getKeyInput+0x110>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  KeyReg1[i] = KeyReg2[i];
 80001bc:	4a3d      	ldr	r2, [pc, #244]	; (80002b4 <getKeyInput+0x114>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4939      	ldr	r1, [pc, #228]	; (80002ac <getKeyInput+0x10c>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  //Add your button here
	  KeyReg2[0] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 80001cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001d0:	4839      	ldr	r0, [pc, #228]	; (80002b8 <getKeyInput+0x118>)
 80001d2:	f001 fb45 	bl	8001860 <HAL_GPIO_ReadPin>
 80001d6:	4603      	mov	r3, r0
 80001d8:	461a      	mov	r2, r3
 80001da:	4b36      	ldr	r3, [pc, #216]	; (80002b4 <getKeyInput+0x114>)
 80001dc:	601a      	str	r2, [r3, #0]
	  KeyReg2[1] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 80001de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001e2:	4835      	ldr	r0, [pc, #212]	; (80002b8 <getKeyInput+0x118>)
 80001e4:	f001 fb3c 	bl	8001860 <HAL_GPIO_ReadPin>
 80001e8:	4603      	mov	r3, r0
 80001ea:	461a      	mov	r2, r3
 80001ec:	4b31      	ldr	r3, [pc, #196]	; (80002b4 <getKeyInput+0x114>)
 80001ee:	605a      	str	r2, [r3, #4]
	  KeyReg2[2] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 80001f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001f4:	4830      	ldr	r0, [pc, #192]	; (80002b8 <getKeyInput+0x118>)
 80001f6:	f001 fb33 	bl	8001860 <HAL_GPIO_ReadPin>
 80001fa:	4603      	mov	r3, r0
 80001fc:	461a      	mov	r2, r3
 80001fe:	4b2d      	ldr	r3, [pc, #180]	; (80002b4 <getKeyInput+0x114>)
 8000200:	609a      	str	r2, [r3, #8]
	  if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000202:	4a2b      	ldr	r2, [pc, #172]	; (80002b0 <getKeyInput+0x110>)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020a:	4928      	ldr	r1, [pc, #160]	; (80002ac <getKeyInput+0x10c>)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000212:	429a      	cmp	r2, r3
 8000214:	d13e      	bne.n	8000294 <getKeyInput+0xf4>
 8000216:	4a25      	ldr	r2, [pc, #148]	; (80002ac <getKeyInput+0x10c>)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021e:	4925      	ldr	r1, [pc, #148]	; (80002b4 <getKeyInput+0x114>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000226:	429a      	cmp	r2, r3
 8000228:	d134      	bne.n	8000294 <getKeyInput+0xf4>
		if (KeyReg3[i] != KeyReg2[i]){
 800022a:	4a24      	ldr	r2, [pc, #144]	; (80002bc <getKeyInput+0x11c>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000232:	4920      	ldr	r1, [pc, #128]	; (80002b4 <getKeyInput+0x114>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800023a:	429a      	cmp	r2, r3
 800023c:	d016      	beq.n	800026c <getKeyInput+0xcc>
		  KeyReg3[i] = KeyReg2[i];
 800023e:	4a1d      	ldr	r2, [pc, #116]	; (80002b4 <getKeyInput+0x114>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000246:	491d      	ldr	r1, [pc, #116]	; (80002bc <getKeyInput+0x11c>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  if (KeyReg2[i] == PRESSED_STATE){
 800024e:	4a19      	ldr	r2, [pc, #100]	; (80002b4 <getKeyInput+0x114>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d11c      	bne.n	8000294 <getKeyInput+0xf4>
			TimeOutForKeyPress[i] = 200;
 800025a:	4a19      	ldr	r2, [pc, #100]	; (80002c0 <getKeyInput+0x120>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	21c8      	movs	r1, #200	; 0xc8
 8000260:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			subKeyProcess(i);
 8000264:	6878      	ldr	r0, [r7, #4]
 8000266:	f7ff ff8b 	bl	8000180 <subKeyProcess>
 800026a:	e013      	b.n	8000294 <getKeyInput+0xf4>
		  }
		}else{
		   TimeOutForKeyPress[i]--;
 800026c:	4a14      	ldr	r2, [pc, #80]	; (80002c0 <getKeyInput+0x120>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000274:	1e5a      	subs	r2, r3, #1
 8000276:	4912      	ldr	r1, [pc, #72]	; (80002c0 <getKeyInput+0x120>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (TimeOutForKeyPress[i] == 0){
 800027e:	4a10      	ldr	r2, [pc, #64]	; (80002c0 <getKeyInput+0x120>)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d104      	bne.n	8000294 <getKeyInput+0xf4>
				KeyReg3[i] = NORMAL_STATE;
 800028a:	4a0c      	ldr	r2, [pc, #48]	; (80002bc <getKeyInput+0x11c>)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2101      	movs	r1, #1
 8000290:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0; i<MAX_BUTTON; i++){
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	3301      	adds	r3, #1
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2b02      	cmp	r3, #2
 800029e:	dd85      	ble.n	80001ac <getKeyInput+0xc>
			}
		}
	  }
	}
}
 80002a0:	bf00      	nop
 80002a2:	bf00      	nop
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	2000000c 	.word	0x2000000c
 80002b0:	20000000 	.word	0x20000000
 80002b4:	20000018 	.word	0x20000018
 80002b8:	40011000 	.word	0x40011000
 80002bc:	20000024 	.word	0x20000024
 80002c0:	20000030 	.word	0x20000030

080002c4 <updateLightTime>:
#include "fsm_automatic.h"

int sec1 = 0;
int sec2 = 0;

void updateLightTime(){
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
	if(sec1 > 0) sec1--;
 80002c8:	4b0a      	ldr	r3, [pc, #40]	; (80002f4 <updateLightTime+0x30>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	dd04      	ble.n	80002da <updateLightTime+0x16>
 80002d0:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <updateLightTime+0x30>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	3b01      	subs	r3, #1
 80002d6:	4a07      	ldr	r2, [pc, #28]	; (80002f4 <updateLightTime+0x30>)
 80002d8:	6013      	str	r3, [r2, #0]
	if(sec2 > 0) sec2--;
 80002da:	4b07      	ldr	r3, [pc, #28]	; (80002f8 <updateLightTime+0x34>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	dd04      	ble.n	80002ec <updateLightTime+0x28>
 80002e2:	4b05      	ldr	r3, [pc, #20]	; (80002f8 <updateLightTime+0x34>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	3b01      	subs	r3, #1
 80002e8:	4a03      	ldr	r2, [pc, #12]	; (80002f8 <updateLightTime+0x34>)
 80002ea:	6013      	str	r3, [r2, #0]
}
 80002ec:	bf00      	nop
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bc80      	pop	{r7}
 80002f2:	4770      	bx	lr
 80002f4:	200000f0 	.word	0x200000f0
 80002f8:	200000f4 	.word	0x200000f4

080002fc <ifButton1Pressed>:

void ifButton1Pressed(){
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	if(isButtonPressed(0) == 1){
 8000300:	2000      	movs	r0, #0
 8000302:	f7ff ff23 	bl	800014c <isButtonPressed>
 8000306:	4603      	mov	r3, r0
 8000308:	2b01      	cmp	r3, #1
 800030a:	d111      	bne.n	8000330 <ifButton1Pressed+0x34>
		status = MAN_RED;
 800030c:	4b09      	ldr	r3, [pc, #36]	; (8000334 <ifButton1Pressed+0x38>)
 800030e:	220c      	movs	r2, #12
 8000310:	601a      	str	r2, [r3, #0]
		SCH_Delete_Task(taskID);
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <ifButton1Pressed+0x3c>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4618      	mov	r0, r3
 8000318:	f000 fe9e 	bl	8001058 <SCH_Delete_Task>
		taskID = SCH_Add_Task(toggleLedRED, 25, 25);
 800031c:	2219      	movs	r2, #25
 800031e:	2119      	movs	r1, #25
 8000320:	4806      	ldr	r0, [pc, #24]	; (800033c <ifButton1Pressed+0x40>)
 8000322:	f000 fda5 	bl	8000e70 <SCH_Add_Task>
 8000326:	4603      	mov	r3, r0
 8000328:	4a03      	ldr	r2, [pc, #12]	; (8000338 <ifButton1Pressed+0x3c>)
 800032a:	6013      	str	r3, [r2, #0]
		clearAllLED();
 800032c:	f000 fb2a 	bl	8000984 <clearAllLED>
	}
}
 8000330:	bf00      	nop
 8000332:	bd80      	pop	{r7, pc}
 8000334:	200000f8 	.word	0x200000f8
 8000338:	20000124 	.word	0x20000124
 800033c:	08000aed 	.word	0x08000aed

08000340 <fsm_automatic_run>:

void fsm_automatic_run(){
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	switch(status){
 8000344:	4b56      	ldr	r3, [pc, #344]	; (80004a0 <fsm_automatic_run+0x160>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	3b01      	subs	r3, #1
 800034a:	2b04      	cmp	r3, #4
 800034c:	f200 80a4 	bhi.w	8000498 <fsm_automatic_run+0x158>
 8000350:	a201      	add	r2, pc, #4	; (adr r2, 8000358 <fsm_automatic_run+0x18>)
 8000352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000356:	bf00      	nop
 8000358:	0800036d 	.word	0x0800036d
 800035c:	080003a9 	.word	0x080003a9
 8000360:	080003e1 	.word	0x080003e1
 8000364:	08000421 	.word	0x08000421
 8000368:	08000459 	.word	0x08000459
	case INIT:
		clearAllLED();
 800036c:	f000 fb0a 	bl	8000984 <clearAllLED>
		status = RED1_GREEN2;
 8000370:	4b4b      	ldr	r3, [pc, #300]	; (80004a0 <fsm_automatic_run+0x160>)
 8000372:	2202      	movs	r2, #2
 8000374:	601a      	str	r2, [r3, #0]
		sec1 = red;
 8000376:	4b4b      	ldr	r3, [pc, #300]	; (80004a4 <fsm_automatic_run+0x164>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4a4b      	ldr	r2, [pc, #300]	; (80004a8 <fsm_automatic_run+0x168>)
 800037c:	6013      	str	r3, [r2, #0]
		sec2 = green;
 800037e:	4b4b      	ldr	r3, [pc, #300]	; (80004ac <fsm_automatic_run+0x16c>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4a4b      	ldr	r2, [pc, #300]	; (80004b0 <fsm_automatic_run+0x170>)
 8000384:	6013      	str	r3, [r2, #0]
		updateClockBuffer(sec1, sec2);
 8000386:	4b48      	ldr	r3, [pc, #288]	; (80004a8 <fsm_automatic_run+0x168>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4a49      	ldr	r2, [pc, #292]	; (80004b0 <fsm_automatic_run+0x170>)
 800038c:	6812      	ldr	r2, [r2, #0]
 800038e:	4611      	mov	r1, r2
 8000390:	4618      	mov	r0, r3
 8000392:	f000 fabb 	bl	800090c <updateClockBuffer>
		taskID = SCH_Add_Task(updateLightTime, 100, 100);
 8000396:	2264      	movs	r2, #100	; 0x64
 8000398:	2164      	movs	r1, #100	; 0x64
 800039a:	4846      	ldr	r0, [pc, #280]	; (80004b4 <fsm_automatic_run+0x174>)
 800039c:	f000 fd68 	bl	8000e70 <SCH_Add_Task>
 80003a0:	4603      	mov	r3, r0
 80003a2:	4a45      	ldr	r2, [pc, #276]	; (80004b8 <fsm_automatic_run+0x178>)
 80003a4:	6013      	str	r3, [r2, #0]
		break;
 80003a6:	e078      	b.n	800049a <fsm_automatic_run+0x15a>
	case RED1_GREEN2:
		turnonTrafficLight1(RED);
 80003a8:	2001      	movs	r0, #1
 80003aa:	f000 fb0f 	bl	80009cc <turnonTrafficLight1>
		turnonTrafficLight2(GREEN);
 80003ae:	2002      	movs	r0, #2
 80003b0:	f000 fb54 	bl	8000a5c <turnonTrafficLight2>

		updateClockBuffer(sec1, sec2);
 80003b4:	4b3c      	ldr	r3, [pc, #240]	; (80004a8 <fsm_automatic_run+0x168>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a3d      	ldr	r2, [pc, #244]	; (80004b0 <fsm_automatic_run+0x170>)
 80003ba:	6812      	ldr	r2, [r2, #0]
 80003bc:	4611      	mov	r1, r2
 80003be:	4618      	mov	r0, r3
 80003c0:	f000 faa4 	bl	800090c <updateClockBuffer>

		if(sec2 <= 0){
 80003c4:	4b3a      	ldr	r3, [pc, #232]	; (80004b0 <fsm_automatic_run+0x170>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	dc06      	bgt.n	80003da <fsm_automatic_run+0x9a>
			status = RED1_YELLOW2;
 80003cc:	4b34      	ldr	r3, [pc, #208]	; (80004a0 <fsm_automatic_run+0x160>)
 80003ce:	2203      	movs	r2, #3
 80003d0:	601a      	str	r2, [r3, #0]
			sec2 = yellow;
 80003d2:	4b3a      	ldr	r3, [pc, #232]	; (80004bc <fsm_automatic_run+0x17c>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	4a36      	ldr	r2, [pc, #216]	; (80004b0 <fsm_automatic_run+0x170>)
 80003d8:	6013      	str	r3, [r2, #0]
		}
		ifButton1Pressed();
 80003da:	f7ff ff8f 	bl	80002fc <ifButton1Pressed>
		break;
 80003de:	e05c      	b.n	800049a <fsm_automatic_run+0x15a>
	case RED1_YELLOW2:
		turnonTrafficLight1(RED);
 80003e0:	2001      	movs	r0, #1
 80003e2:	f000 faf3 	bl	80009cc <turnonTrafficLight1>
		turnonTrafficLight2(YELLOW);
 80003e6:	2003      	movs	r0, #3
 80003e8:	f000 fb38 	bl	8000a5c <turnonTrafficLight2>

		updateClockBuffer(sec1, sec2);
 80003ec:	4b2e      	ldr	r3, [pc, #184]	; (80004a8 <fsm_automatic_run+0x168>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a2f      	ldr	r2, [pc, #188]	; (80004b0 <fsm_automatic_run+0x170>)
 80003f2:	6812      	ldr	r2, [r2, #0]
 80003f4:	4611      	mov	r1, r2
 80003f6:	4618      	mov	r0, r3
 80003f8:	f000 fa88 	bl	800090c <updateClockBuffer>

		if(sec2 <= 0){
 80003fc:	4b2c      	ldr	r3, [pc, #176]	; (80004b0 <fsm_automatic_run+0x170>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	dc0a      	bgt.n	800041a <fsm_automatic_run+0xda>
			status = GREEN1_RED2;
 8000404:	4b26      	ldr	r3, [pc, #152]	; (80004a0 <fsm_automatic_run+0x160>)
 8000406:	2204      	movs	r2, #4
 8000408:	601a      	str	r2, [r3, #0]
			sec1 = green;
 800040a:	4b28      	ldr	r3, [pc, #160]	; (80004ac <fsm_automatic_run+0x16c>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4a26      	ldr	r2, [pc, #152]	; (80004a8 <fsm_automatic_run+0x168>)
 8000410:	6013      	str	r3, [r2, #0]
			sec2 = red;
 8000412:	4b24      	ldr	r3, [pc, #144]	; (80004a4 <fsm_automatic_run+0x164>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4a26      	ldr	r2, [pc, #152]	; (80004b0 <fsm_automatic_run+0x170>)
 8000418:	6013      	str	r3, [r2, #0]
		}
		ifButton1Pressed();
 800041a:	f7ff ff6f 	bl	80002fc <ifButton1Pressed>
		break;
 800041e:	e03c      	b.n	800049a <fsm_automatic_run+0x15a>
	case GREEN1_RED2:
		turnonTrafficLight1(GREEN);
 8000420:	2002      	movs	r0, #2
 8000422:	f000 fad3 	bl	80009cc <turnonTrafficLight1>
		turnonTrafficLight2(RED);
 8000426:	2001      	movs	r0, #1
 8000428:	f000 fb18 	bl	8000a5c <turnonTrafficLight2>

		updateClockBuffer(sec1, sec2);
 800042c:	4b1e      	ldr	r3, [pc, #120]	; (80004a8 <fsm_automatic_run+0x168>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a1f      	ldr	r2, [pc, #124]	; (80004b0 <fsm_automatic_run+0x170>)
 8000432:	6812      	ldr	r2, [r2, #0]
 8000434:	4611      	mov	r1, r2
 8000436:	4618      	mov	r0, r3
 8000438:	f000 fa68 	bl	800090c <updateClockBuffer>

		if(sec1 <= 0){
 800043c:	4b1a      	ldr	r3, [pc, #104]	; (80004a8 <fsm_automatic_run+0x168>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2b00      	cmp	r3, #0
 8000442:	dc06      	bgt.n	8000452 <fsm_automatic_run+0x112>
			status = YELLOW1_RED2;
 8000444:	4b16      	ldr	r3, [pc, #88]	; (80004a0 <fsm_automatic_run+0x160>)
 8000446:	2205      	movs	r2, #5
 8000448:	601a      	str	r2, [r3, #0]
			sec1 = yellow;
 800044a:	4b1c      	ldr	r3, [pc, #112]	; (80004bc <fsm_automatic_run+0x17c>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4a16      	ldr	r2, [pc, #88]	; (80004a8 <fsm_automatic_run+0x168>)
 8000450:	6013      	str	r3, [r2, #0]
		}
		ifButton1Pressed();
 8000452:	f7ff ff53 	bl	80002fc <ifButton1Pressed>
		break;
 8000456:	e020      	b.n	800049a <fsm_automatic_run+0x15a>
	case YELLOW1_RED2:
		turnonTrafficLight1(YELLOW);
 8000458:	2003      	movs	r0, #3
 800045a:	f000 fab7 	bl	80009cc <turnonTrafficLight1>
		turnonTrafficLight2(RED);
 800045e:	2001      	movs	r0, #1
 8000460:	f000 fafc 	bl	8000a5c <turnonTrafficLight2>

		updateClockBuffer(sec1, sec2);
 8000464:	4b10      	ldr	r3, [pc, #64]	; (80004a8 <fsm_automatic_run+0x168>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a11      	ldr	r2, [pc, #68]	; (80004b0 <fsm_automatic_run+0x170>)
 800046a:	6812      	ldr	r2, [r2, #0]
 800046c:	4611      	mov	r1, r2
 800046e:	4618      	mov	r0, r3
 8000470:	f000 fa4c 	bl	800090c <updateClockBuffer>

		if(sec1 <= 0){
 8000474:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <fsm_automatic_run+0x168>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	2b00      	cmp	r3, #0
 800047a:	dc0a      	bgt.n	8000492 <fsm_automatic_run+0x152>
			status = RED1_GREEN2;
 800047c:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <fsm_automatic_run+0x160>)
 800047e:	2202      	movs	r2, #2
 8000480:	601a      	str	r2, [r3, #0]
			sec1 = red;
 8000482:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <fsm_automatic_run+0x164>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a08      	ldr	r2, [pc, #32]	; (80004a8 <fsm_automatic_run+0x168>)
 8000488:	6013      	str	r3, [r2, #0]
			sec2 = green;
 800048a:	4b08      	ldr	r3, [pc, #32]	; (80004ac <fsm_automatic_run+0x16c>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a08      	ldr	r2, [pc, #32]	; (80004b0 <fsm_automatic_run+0x170>)
 8000490:	6013      	str	r3, [r2, #0]
		}
		ifButton1Pressed();
 8000492:	f7ff ff33 	bl	80002fc <ifButton1Pressed>
		break;
 8000496:	e000      	b.n	800049a <fsm_automatic_run+0x15a>
	default:
		break;
 8000498:	bf00      	nop
	}

}
 800049a:	bf00      	nop
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	200000f8 	.word	0x200000f8
 80004a4:	20000048 	.word	0x20000048
 80004a8:	200000f0 	.word	0x200000f0
 80004ac:	2000004c 	.word	0x2000004c
 80004b0:	200000f4 	.word	0x200000f4
 80004b4:	080002c5 	.word	0x080002c5
 80004b8:	20000124 	.word	0x20000124
 80004bc:	20000050 	.word	0x20000050

080004c0 <ledBalance>:

int redMod = 1;
int yellowMod = 1;
int greenMod = 1;

void ledBalance(){
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
	if(red == (green + yellow)) return;
 80004c4:	4b12      	ldr	r3, [pc, #72]	; (8000510 <ledBalance+0x50>)
 80004c6:	681a      	ldr	r2, [r3, #0]
 80004c8:	4b12      	ldr	r3, [pc, #72]	; (8000514 <ledBalance+0x54>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	441a      	add	r2, r3
 80004ce:	4b12      	ldr	r3, [pc, #72]	; (8000518 <ledBalance+0x58>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	429a      	cmp	r2, r3
 80004d4:	d018      	beq.n	8000508 <ledBalance+0x48>
	else if(red < (green + yellow)){
 80004d6:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <ledBalance+0x50>)
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <ledBalance+0x54>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	441a      	add	r2, r3
 80004e0:	4b0d      	ldr	r3, [pc, #52]	; (8000518 <ledBalance+0x58>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	dd07      	ble.n	80004f8 <ledBalance+0x38>
		red = green + yellow;
 80004e8:	4b09      	ldr	r3, [pc, #36]	; (8000510 <ledBalance+0x50>)
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	4b09      	ldr	r3, [pc, #36]	; (8000514 <ledBalance+0x54>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4413      	add	r3, r2
 80004f2:	4a09      	ldr	r2, [pc, #36]	; (8000518 <ledBalance+0x58>)
 80004f4:	6013      	str	r3, [r2, #0]
 80004f6:	e008      	b.n	800050a <ledBalance+0x4a>
	}
	else{
		green = red - yellow;
 80004f8:	4b07      	ldr	r3, [pc, #28]	; (8000518 <ledBalance+0x58>)
 80004fa:	681a      	ldr	r2, [r3, #0]
 80004fc:	4b05      	ldr	r3, [pc, #20]	; (8000514 <ledBalance+0x54>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	1ad3      	subs	r3, r2, r3
 8000502:	4a03      	ldr	r2, [pc, #12]	; (8000510 <ledBalance+0x50>)
 8000504:	6013      	str	r3, [r2, #0]
 8000506:	e000      	b.n	800050a <ledBalance+0x4a>
	if(red == (green + yellow)) return;
 8000508:	bf00      	nop
	}
}
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr
 8000510:	2000004c 	.word	0x2000004c
 8000514:	20000050 	.word	0x20000050
 8000518:	20000048 	.word	0x20000048

0800051c <fsm_manual_run>:

void fsm_manual_run(){
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	switch(status){
 8000520:	4b5e      	ldr	r3, [pc, #376]	; (800069c <fsm_manual_run+0x180>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2b0e      	cmp	r3, #14
 8000526:	d042      	beq.n	80005ae <fsm_manual_run+0x92>
 8000528:	2b0e      	cmp	r3, #14
 800052a:	f300 80ae 	bgt.w	800068a <fsm_manual_run+0x16e>
 800052e:	2b0c      	cmp	r3, #12
 8000530:	d002      	beq.n	8000538 <fsm_manual_run+0x1c>
 8000532:	2b0d      	cmp	r3, #13
 8000534:	d076      	beq.n	8000624 <fsm_manual_run+0x108>
		if(isButtonPressed(2) == 1){
			green = greenMod;
		}
		break;
	default:
		break;
 8000536:	e0a8      	b.n	800068a <fsm_manual_run+0x16e>
		updateClockBuffer(2, redMod);
 8000538:	4b59      	ldr	r3, [pc, #356]	; (80006a0 <fsm_manual_run+0x184>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4619      	mov	r1, r3
 800053e:	2002      	movs	r0, #2
 8000540:	f000 f9e4 	bl	800090c <updateClockBuffer>
		if(isButtonPressed(0) == 1){
 8000544:	2000      	movs	r0, #0
 8000546:	f7ff fe01 	bl	800014c <isButtonPressed>
 800054a:	4603      	mov	r3, r0
 800054c:	2b01      	cmp	r3, #1
 800054e:	d111      	bne.n	8000574 <fsm_manual_run+0x58>
			status = MAN_YELLOW;
 8000550:	4b52      	ldr	r3, [pc, #328]	; (800069c <fsm_manual_run+0x180>)
 8000552:	220e      	movs	r2, #14
 8000554:	601a      	str	r2, [r3, #0]
			SCH_Delete_Task(taskID);
 8000556:	4b53      	ldr	r3, [pc, #332]	; (80006a4 <fsm_manual_run+0x188>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4618      	mov	r0, r3
 800055c:	f000 fd7c 	bl	8001058 <SCH_Delete_Task>
			taskID = SCH_Add_Task(toggleLedYELLOW, 25, 25);
 8000560:	2219      	movs	r2, #25
 8000562:	2119      	movs	r1, #25
 8000564:	4850      	ldr	r0, [pc, #320]	; (80006a8 <fsm_manual_run+0x18c>)
 8000566:	f000 fc83 	bl	8000e70 <SCH_Add_Task>
 800056a:	4603      	mov	r3, r0
 800056c:	4a4d      	ldr	r2, [pc, #308]	; (80006a4 <fsm_manual_run+0x188>)
 800056e:	6013      	str	r3, [r2, #0]
			clearAllLED();
 8000570:	f000 fa08 	bl	8000984 <clearAllLED>
		if(isButtonPressed(1) == 1){
 8000574:	2001      	movs	r0, #1
 8000576:	f7ff fde9 	bl	800014c <isButtonPressed>
 800057a:	4603      	mov	r3, r0
 800057c:	2b01      	cmp	r3, #1
 800057e:	d10b      	bne.n	8000598 <fsm_manual_run+0x7c>
			redMod++;
 8000580:	4b47      	ldr	r3, [pc, #284]	; (80006a0 <fsm_manual_run+0x184>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	3301      	adds	r3, #1
 8000586:	4a46      	ldr	r2, [pc, #280]	; (80006a0 <fsm_manual_run+0x184>)
 8000588:	6013      	str	r3, [r2, #0]
			if(redMod > 99) redMod = 1;
 800058a:	4b45      	ldr	r3, [pc, #276]	; (80006a0 <fsm_manual_run+0x184>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2b63      	cmp	r3, #99	; 0x63
 8000590:	dd02      	ble.n	8000598 <fsm_manual_run+0x7c>
 8000592:	4b43      	ldr	r3, [pc, #268]	; (80006a0 <fsm_manual_run+0x184>)
 8000594:	2201      	movs	r2, #1
 8000596:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(2) == 1){
 8000598:	2002      	movs	r0, #2
 800059a:	f7ff fdd7 	bl	800014c <isButtonPressed>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d174      	bne.n	800068e <fsm_manual_run+0x172>
			red = redMod;
 80005a4:	4b3e      	ldr	r3, [pc, #248]	; (80006a0 <fsm_manual_run+0x184>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a40      	ldr	r2, [pc, #256]	; (80006ac <fsm_manual_run+0x190>)
 80005aa:	6013      	str	r3, [r2, #0]
		break;
 80005ac:	e06f      	b.n	800068e <fsm_manual_run+0x172>
		updateClockBuffer(3, yellowMod);
 80005ae:	4b40      	ldr	r3, [pc, #256]	; (80006b0 <fsm_manual_run+0x194>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4619      	mov	r1, r3
 80005b4:	2003      	movs	r0, #3
 80005b6:	f000 f9a9 	bl	800090c <updateClockBuffer>
		if(isButtonPressed(0) == 1){
 80005ba:	2000      	movs	r0, #0
 80005bc:	f7ff fdc6 	bl	800014c <isButtonPressed>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	d111      	bne.n	80005ea <fsm_manual_run+0xce>
			status = MAN_GREEN;
 80005c6:	4b35      	ldr	r3, [pc, #212]	; (800069c <fsm_manual_run+0x180>)
 80005c8:	220d      	movs	r2, #13
 80005ca:	601a      	str	r2, [r3, #0]
			SCH_Delete_Task(taskID);
 80005cc:	4b35      	ldr	r3, [pc, #212]	; (80006a4 <fsm_manual_run+0x188>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 fd41 	bl	8001058 <SCH_Delete_Task>
			taskID = SCH_Add_Task(toggleLedGREEN, 25, 25);
 80005d6:	2219      	movs	r2, #25
 80005d8:	2119      	movs	r1, #25
 80005da:	4836      	ldr	r0, [pc, #216]	; (80006b4 <fsm_manual_run+0x198>)
 80005dc:	f000 fc48 	bl	8000e70 <SCH_Add_Task>
 80005e0:	4603      	mov	r3, r0
 80005e2:	4a30      	ldr	r2, [pc, #192]	; (80006a4 <fsm_manual_run+0x188>)
 80005e4:	6013      	str	r3, [r2, #0]
			clearAllLED();
 80005e6:	f000 f9cd 	bl	8000984 <clearAllLED>
		if(isButtonPressed(1) == 1){
 80005ea:	2001      	movs	r0, #1
 80005ec:	f7ff fdae 	bl	800014c <isButtonPressed>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d10b      	bne.n	800060e <fsm_manual_run+0xf2>
			yellowMod++;
 80005f6:	4b2e      	ldr	r3, [pc, #184]	; (80006b0 <fsm_manual_run+0x194>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	3301      	adds	r3, #1
 80005fc:	4a2c      	ldr	r2, [pc, #176]	; (80006b0 <fsm_manual_run+0x194>)
 80005fe:	6013      	str	r3, [r2, #0]
			if(yellowMod > 99) yellowMod = 1;
 8000600:	4b2b      	ldr	r3, [pc, #172]	; (80006b0 <fsm_manual_run+0x194>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2b63      	cmp	r3, #99	; 0x63
 8000606:	dd02      	ble.n	800060e <fsm_manual_run+0xf2>
 8000608:	4b29      	ldr	r3, [pc, #164]	; (80006b0 <fsm_manual_run+0x194>)
 800060a:	2201      	movs	r2, #1
 800060c:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(2) == 1){
 800060e:	2002      	movs	r0, #2
 8000610:	f7ff fd9c 	bl	800014c <isButtonPressed>
 8000614:	4603      	mov	r3, r0
 8000616:	2b01      	cmp	r3, #1
 8000618:	d13b      	bne.n	8000692 <fsm_manual_run+0x176>
			yellow = yellowMod;
 800061a:	4b25      	ldr	r3, [pc, #148]	; (80006b0 <fsm_manual_run+0x194>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a26      	ldr	r2, [pc, #152]	; (80006b8 <fsm_manual_run+0x19c>)
 8000620:	6013      	str	r3, [r2, #0]
		break;
 8000622:	e036      	b.n	8000692 <fsm_manual_run+0x176>
		updateClockBuffer(4, greenMod);
 8000624:	4b25      	ldr	r3, [pc, #148]	; (80006bc <fsm_manual_run+0x1a0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4619      	mov	r1, r3
 800062a:	2004      	movs	r0, #4
 800062c:	f000 f96e 	bl	800090c <updateClockBuffer>
		if(isButtonPressed(0) == 1){
 8000630:	2000      	movs	r0, #0
 8000632:	f7ff fd8b 	bl	800014c <isButtonPressed>
 8000636:	4603      	mov	r3, r0
 8000638:	2b01      	cmp	r3, #1
 800063a:	d109      	bne.n	8000650 <fsm_manual_run+0x134>
			status = INIT;
 800063c:	4b17      	ldr	r3, [pc, #92]	; (800069c <fsm_manual_run+0x180>)
 800063e:	2201      	movs	r2, #1
 8000640:	601a      	str	r2, [r3, #0]
			ledBalance();
 8000642:	f7ff ff3d 	bl	80004c0 <ledBalance>
			SCH_Delete_Task(taskID);
 8000646:	4b17      	ldr	r3, [pc, #92]	; (80006a4 <fsm_manual_run+0x188>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4618      	mov	r0, r3
 800064c:	f000 fd04 	bl	8001058 <SCH_Delete_Task>
		if(isButtonPressed(1) == 1){
 8000650:	2001      	movs	r0, #1
 8000652:	f7ff fd7b 	bl	800014c <isButtonPressed>
 8000656:	4603      	mov	r3, r0
 8000658:	2b01      	cmp	r3, #1
 800065a:	d10b      	bne.n	8000674 <fsm_manual_run+0x158>
			greenMod++;
 800065c:	4b17      	ldr	r3, [pc, #92]	; (80006bc <fsm_manual_run+0x1a0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	3301      	adds	r3, #1
 8000662:	4a16      	ldr	r2, [pc, #88]	; (80006bc <fsm_manual_run+0x1a0>)
 8000664:	6013      	str	r3, [r2, #0]
			if(greenMod > 99) greenMod = 1;
 8000666:	4b15      	ldr	r3, [pc, #84]	; (80006bc <fsm_manual_run+0x1a0>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	2b63      	cmp	r3, #99	; 0x63
 800066c:	dd02      	ble.n	8000674 <fsm_manual_run+0x158>
 800066e:	4b13      	ldr	r3, [pc, #76]	; (80006bc <fsm_manual_run+0x1a0>)
 8000670:	2201      	movs	r2, #1
 8000672:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(2) == 1){
 8000674:	2002      	movs	r0, #2
 8000676:	f7ff fd69 	bl	800014c <isButtonPressed>
 800067a:	4603      	mov	r3, r0
 800067c:	2b01      	cmp	r3, #1
 800067e:	d10a      	bne.n	8000696 <fsm_manual_run+0x17a>
			green = greenMod;
 8000680:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <fsm_manual_run+0x1a0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a0e      	ldr	r2, [pc, #56]	; (80006c0 <fsm_manual_run+0x1a4>)
 8000686:	6013      	str	r3, [r2, #0]
		break;
 8000688:	e005      	b.n	8000696 <fsm_manual_run+0x17a>
		break;
 800068a:	bf00      	nop
 800068c:	e004      	b.n	8000698 <fsm_manual_run+0x17c>
		break;
 800068e:	bf00      	nop
 8000690:	e002      	b.n	8000698 <fsm_manual_run+0x17c>
		break;
 8000692:	bf00      	nop
 8000694:	e000      	b.n	8000698 <fsm_manual_run+0x17c>
		break;
 8000696:	bf00      	nop
	}
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	200000f8 	.word	0x200000f8
 80006a0:	2000003c 	.word	0x2000003c
 80006a4:	20000124 	.word	0x20000124
 80006a8:	08000b09 	.word	0x08000b09
 80006ac:	20000048 	.word	0x20000048
 80006b0:	20000040 	.word	0x20000040
 80006b4:	08000b25 	.word	0x08000b25
 80006b8:	20000050 	.word	0x20000050
 80006bc:	20000044 	.word	0x20000044
 80006c0:	2000004c 	.word	0x2000004c

080006c4 <display7SEG>:
int green = 3;
int yellow = 2;
int index_led = 0;
uint32_t taskID;

void display7SEG(int num){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	if(num==1 || num==4) HAL_GPIO_WritePin (SEG7_A_GPIO_Port, SEG7_A_Pin, SET);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d002      	beq.n	80006d8 <display7SEG+0x14>
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2b04      	cmp	r3, #4
 80006d6:	d105      	bne.n	80006e4 <display7SEG+0x20>
 80006d8:	2201      	movs	r2, #1
 80006da:	2101      	movs	r1, #1
 80006dc:	4844      	ldr	r0, [pc, #272]	; (80007f0 <display7SEG+0x12c>)
 80006de:	f001 f8d6 	bl	800188e <HAL_GPIO_WritePin>
 80006e2:	e004      	b.n	80006ee <display7SEG+0x2a>
	else HAL_GPIO_WritePin (SEG7_A_GPIO_Port, SEG7_A_Pin, RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2101      	movs	r1, #1
 80006e8:	4841      	ldr	r0, [pc, #260]	; (80007f0 <display7SEG+0x12c>)
 80006ea:	f001 f8d0 	bl	800188e <HAL_GPIO_WritePin>

	if(num==5 || num==6) HAL_GPIO_WritePin (SEG7_B_GPIO_Port, SEG7_B_Pin, SET);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2b05      	cmp	r3, #5
 80006f2:	d002      	beq.n	80006fa <display7SEG+0x36>
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2b06      	cmp	r3, #6
 80006f8:	d105      	bne.n	8000706 <display7SEG+0x42>
 80006fa:	2201      	movs	r2, #1
 80006fc:	2102      	movs	r1, #2
 80006fe:	483c      	ldr	r0, [pc, #240]	; (80007f0 <display7SEG+0x12c>)
 8000700:	f001 f8c5 	bl	800188e <HAL_GPIO_WritePin>
 8000704:	e004      	b.n	8000710 <display7SEG+0x4c>
	else HAL_GPIO_WritePin (SEG7_B_GPIO_Port, SEG7_B_Pin, RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	2102      	movs	r1, #2
 800070a:	4839      	ldr	r0, [pc, #228]	; (80007f0 <display7SEG+0x12c>)
 800070c:	f001 f8bf 	bl	800188e <HAL_GPIO_WritePin>

	if(num==2) HAL_GPIO_WritePin (SEG7_C_GPIO_Port, SEG7_C_Pin, SET);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2b02      	cmp	r3, #2
 8000714:	d105      	bne.n	8000722 <display7SEG+0x5e>
 8000716:	2201      	movs	r2, #1
 8000718:	2104      	movs	r1, #4
 800071a:	4835      	ldr	r0, [pc, #212]	; (80007f0 <display7SEG+0x12c>)
 800071c:	f001 f8b7 	bl	800188e <HAL_GPIO_WritePin>
 8000720:	e004      	b.n	800072c <display7SEG+0x68>
	else HAL_GPIO_WritePin (SEG7_C_GPIO_Port, SEG7_C_Pin, RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	2104      	movs	r1, #4
 8000726:	4832      	ldr	r0, [pc, #200]	; (80007f0 <display7SEG+0x12c>)
 8000728:	f001 f8b1 	bl	800188e <HAL_GPIO_WritePin>

	if(num==1 || num==4 || num==7) HAL_GPIO_WritePin (SEG7_D_GPIO_Port, SEG7_D_Pin, SET);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d005      	beq.n	800073e <display7SEG+0x7a>
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2b04      	cmp	r3, #4
 8000736:	d002      	beq.n	800073e <display7SEG+0x7a>
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2b07      	cmp	r3, #7
 800073c:	d105      	bne.n	800074a <display7SEG+0x86>
 800073e:	2201      	movs	r2, #1
 8000740:	2108      	movs	r1, #8
 8000742:	482b      	ldr	r0, [pc, #172]	; (80007f0 <display7SEG+0x12c>)
 8000744:	f001 f8a3 	bl	800188e <HAL_GPIO_WritePin>
 8000748:	e004      	b.n	8000754 <display7SEG+0x90>
	else HAL_GPIO_WritePin (SEG7_D_GPIO_Port, SEG7_D_Pin, RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2108      	movs	r1, #8
 800074e:	4828      	ldr	r0, [pc, #160]	; (80007f0 <display7SEG+0x12c>)
 8000750:	f001 f89d 	bl	800188e <HAL_GPIO_WritePin>

	if(num==1 || num==3 || num==4 || num==5 || num==7 || num==9) HAL_GPIO_WritePin (SEG7_E_GPIO_Port, SEG7_E_Pin, SET);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d00e      	beq.n	8000778 <display7SEG+0xb4>
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2b03      	cmp	r3, #3
 800075e:	d00b      	beq.n	8000778 <display7SEG+0xb4>
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2b04      	cmp	r3, #4
 8000764:	d008      	beq.n	8000778 <display7SEG+0xb4>
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2b05      	cmp	r3, #5
 800076a:	d005      	beq.n	8000778 <display7SEG+0xb4>
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2b07      	cmp	r3, #7
 8000770:	d002      	beq.n	8000778 <display7SEG+0xb4>
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2b09      	cmp	r3, #9
 8000776:	d105      	bne.n	8000784 <display7SEG+0xc0>
 8000778:	2201      	movs	r2, #1
 800077a:	2110      	movs	r1, #16
 800077c:	481c      	ldr	r0, [pc, #112]	; (80007f0 <display7SEG+0x12c>)
 800077e:	f001 f886 	bl	800188e <HAL_GPIO_WritePin>
 8000782:	e004      	b.n	800078e <display7SEG+0xca>
	else HAL_GPIO_WritePin (SEG7_E_GPIO_Port, SEG7_E_Pin, RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	2110      	movs	r1, #16
 8000788:	4819      	ldr	r0, [pc, #100]	; (80007f0 <display7SEG+0x12c>)
 800078a:	f001 f880 	bl	800188e <HAL_GPIO_WritePin>

	if(num==1 || num==2 || num==3 || num==7) HAL_GPIO_WritePin (SEG7_F_GPIO_Port, SEG7_F_Pin, SET);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d008      	beq.n	80007a6 <display7SEG+0xe2>
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2b02      	cmp	r3, #2
 8000798:	d005      	beq.n	80007a6 <display7SEG+0xe2>
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2b03      	cmp	r3, #3
 800079e:	d002      	beq.n	80007a6 <display7SEG+0xe2>
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2b07      	cmp	r3, #7
 80007a4:	d105      	bne.n	80007b2 <display7SEG+0xee>
 80007a6:	2201      	movs	r2, #1
 80007a8:	2120      	movs	r1, #32
 80007aa:	4811      	ldr	r0, [pc, #68]	; (80007f0 <display7SEG+0x12c>)
 80007ac:	f001 f86f 	bl	800188e <HAL_GPIO_WritePin>
 80007b0:	e004      	b.n	80007bc <display7SEG+0xf8>
	else HAL_GPIO_WritePin (SEG7_F_GPIO_Port, SEG7_F_Pin, RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2120      	movs	r1, #32
 80007b6:	480e      	ldr	r0, [pc, #56]	; (80007f0 <display7SEG+0x12c>)
 80007b8:	f001 f869 	bl	800188e <HAL_GPIO_WritePin>

	if(num==0 || num==1 || num==7) HAL_GPIO_WritePin (SEG7_G_GPIO_Port, SEG7_G_Pin, SET);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d005      	beq.n	80007ce <display7SEG+0x10a>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d002      	beq.n	80007ce <display7SEG+0x10a>
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2b07      	cmp	r3, #7
 80007cc:	d105      	bne.n	80007da <display7SEG+0x116>
 80007ce:	2201      	movs	r2, #1
 80007d0:	2140      	movs	r1, #64	; 0x40
 80007d2:	4807      	ldr	r0, [pc, #28]	; (80007f0 <display7SEG+0x12c>)
 80007d4:	f001 f85b 	bl	800188e <HAL_GPIO_WritePin>
 80007d8:	e005      	b.n	80007e6 <display7SEG+0x122>
	else HAL_GPIO_WritePin (SEG7_G_GPIO_Port, SEG7_G_Pin, RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2140      	movs	r1, #64	; 0x40
 80007de:	4804      	ldr	r0, [pc, #16]	; (80007f0 <display7SEG+0x12c>)
 80007e0:	f001 f855 	bl	800188e <HAL_GPIO_WritePin>

}
 80007e4:	bf00      	nop
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40010c00 	.word	0x40010c00

080007f4 <update7SEG>:

int led_buffer[4] = {0, 0, 0, 0};

void update7SEG(int index){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2b03      	cmp	r3, #3
 8000800:	d87a      	bhi.n	80008f8 <update7SEG+0x104>
 8000802:	a201      	add	r2, pc, #4	; (adr r2, 8000808 <update7SEG+0x14>)
 8000804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000808:	08000819 	.word	0x08000819
 800080c:	08000851 	.word	0x08000851
 8000810:	08000889 	.word	0x08000889
 8000814:	080008c1 	.word	0x080008c1
	switch(index){
	case 0:
		// Display the first 7 SEG with led_buffer [0]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000818:	2200      	movs	r2, #0
 800081a:	2140      	movs	r1, #64	; 0x40
 800081c:	4839      	ldr	r0, [pc, #228]	; (8000904 <update7SEG+0x110>)
 800081e:	f001 f836 	bl	800188e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000822:	2201      	movs	r2, #1
 8000824:	2180      	movs	r1, #128	; 0x80
 8000826:	4837      	ldr	r0, [pc, #220]	; (8000904 <update7SEG+0x110>)
 8000828:	f001 f831 	bl	800188e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 800082c:	2201      	movs	r2, #1
 800082e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000832:	4834      	ldr	r0, [pc, #208]	; (8000904 <update7SEG+0x110>)
 8000834:	f001 f82b 	bl	800188e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000838:	2201      	movs	r2, #1
 800083a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800083e:	4831      	ldr	r0, [pc, #196]	; (8000904 <update7SEG+0x110>)
 8000840:	f001 f825 	bl	800188e <HAL_GPIO_WritePin>
		display7SEG(led_buffer[0]);
 8000844:	4b30      	ldr	r3, [pc, #192]	; (8000908 <update7SEG+0x114>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ff3b 	bl	80006c4 <display7SEG>
		break;
 800084e:	e054      	b.n	80008fa <update7SEG+0x106>
	case 1:
		// Display the second 7 SEG with led_buffer [1]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000850:	2201      	movs	r2, #1
 8000852:	2140      	movs	r1, #64	; 0x40
 8000854:	482b      	ldr	r0, [pc, #172]	; (8000904 <update7SEG+0x110>)
 8000856:	f001 f81a 	bl	800188e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2180      	movs	r1, #128	; 0x80
 800085e:	4829      	ldr	r0, [pc, #164]	; (8000904 <update7SEG+0x110>)
 8000860:	f001 f815 	bl	800188e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000864:	2201      	movs	r2, #1
 8000866:	f44f 7180 	mov.w	r1, #256	; 0x100
 800086a:	4826      	ldr	r0, [pc, #152]	; (8000904 <update7SEG+0x110>)
 800086c:	f001 f80f 	bl	800188e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000870:	2201      	movs	r2, #1
 8000872:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000876:	4823      	ldr	r0, [pc, #140]	; (8000904 <update7SEG+0x110>)
 8000878:	f001 f809 	bl	800188e <HAL_GPIO_WritePin>
		display7SEG(led_buffer[1]);
 800087c:	4b22      	ldr	r3, [pc, #136]	; (8000908 <update7SEG+0x114>)
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff ff1f 	bl	80006c4 <display7SEG>
		break;
 8000886:	e038      	b.n	80008fa <update7SEG+0x106>
	case 2:
		// Display the third 7 SEG with led_buffer [2]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000888:	2201      	movs	r2, #1
 800088a:	2140      	movs	r1, #64	; 0x40
 800088c:	481d      	ldr	r0, [pc, #116]	; (8000904 <update7SEG+0x110>)
 800088e:	f000 fffe 	bl	800188e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000892:	2201      	movs	r2, #1
 8000894:	2180      	movs	r1, #128	; 0x80
 8000896:	481b      	ldr	r0, [pc, #108]	; (8000904 <update7SEG+0x110>)
 8000898:	f000 fff9 	bl	800188e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a2:	4818      	ldr	r0, [pc, #96]	; (8000904 <update7SEG+0x110>)
 80008a4:	f000 fff3 	bl	800188e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80008a8:	2201      	movs	r2, #1
 80008aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ae:	4815      	ldr	r0, [pc, #84]	; (8000904 <update7SEG+0x110>)
 80008b0:	f000 ffed 	bl	800188e <HAL_GPIO_WritePin>
		display7SEG(led_buffer[2]);
 80008b4:	4b14      	ldr	r3, [pc, #80]	; (8000908 <update7SEG+0x114>)
 80008b6:	689b      	ldr	r3, [r3, #8]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff ff03 	bl	80006c4 <display7SEG>
		break;
 80008be:	e01c      	b.n	80008fa <update7SEG+0x106>
	case 3:
		// Display the forth 7 SEG with led_buffer [3]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80008c0:	2201      	movs	r2, #1
 80008c2:	2140      	movs	r1, #64	; 0x40
 80008c4:	480f      	ldr	r0, [pc, #60]	; (8000904 <update7SEG+0x110>)
 80008c6:	f000 ffe2 	bl	800188e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80008ca:	2201      	movs	r2, #1
 80008cc:	2180      	movs	r1, #128	; 0x80
 80008ce:	480d      	ldr	r0, [pc, #52]	; (8000904 <update7SEG+0x110>)
 80008d0:	f000 ffdd 	bl	800188e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008da:	480a      	ldr	r0, [pc, #40]	; (8000904 <update7SEG+0x110>)
 80008dc:	f000 ffd7 	bl	800188e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80008e0:	2200      	movs	r2, #0
 80008e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e6:	4807      	ldr	r0, [pc, #28]	; (8000904 <update7SEG+0x110>)
 80008e8:	f000 ffd1 	bl	800188e <HAL_GPIO_WritePin>
		display7SEG(led_buffer[3]);
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <update7SEG+0x114>)
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff fee7 	bl	80006c4 <display7SEG>
		break;
 80008f6:	e000      	b.n	80008fa <update7SEG+0x106>
	default:
		break;
 80008f8:	bf00      	nop
	}
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40010800 	.word	0x40010800
 8000908:	20000100 	.word	0x20000100

0800090c <updateClockBuffer>:

void updateClockBuffer(int sec1, int sec2){
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	6039      	str	r1, [r7, #0]
	led_buffer[0] = sec1/10;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4a18      	ldr	r2, [pc, #96]	; (800097c <updateClockBuffer+0x70>)
 800091a:	fb82 1203 	smull	r1, r2, r2, r3
 800091e:	1092      	asrs	r2, r2, #2
 8000920:	17db      	asrs	r3, r3, #31
 8000922:	1ad3      	subs	r3, r2, r3
 8000924:	4a16      	ldr	r2, [pc, #88]	; (8000980 <updateClockBuffer+0x74>)
 8000926:	6013      	str	r3, [r2, #0]
	led_buffer[1] = sec1%10;
 8000928:	6879      	ldr	r1, [r7, #4]
 800092a:	4b14      	ldr	r3, [pc, #80]	; (800097c <updateClockBuffer+0x70>)
 800092c:	fb83 2301 	smull	r2, r3, r3, r1
 8000930:	109a      	asrs	r2, r3, #2
 8000932:	17cb      	asrs	r3, r1, #31
 8000934:	1ad2      	subs	r2, r2, r3
 8000936:	4613      	mov	r3, r2
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	4413      	add	r3, r2
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	1aca      	subs	r2, r1, r3
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <updateClockBuffer+0x74>)
 8000942:	605a      	str	r2, [r3, #4]
	led_buffer[2] = sec2/10;
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	4a0d      	ldr	r2, [pc, #52]	; (800097c <updateClockBuffer+0x70>)
 8000948:	fb82 1203 	smull	r1, r2, r2, r3
 800094c:	1092      	asrs	r2, r2, #2
 800094e:	17db      	asrs	r3, r3, #31
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	4a0b      	ldr	r2, [pc, #44]	; (8000980 <updateClockBuffer+0x74>)
 8000954:	6093      	str	r3, [r2, #8]
	led_buffer[3] = sec2%10;
 8000956:	6839      	ldr	r1, [r7, #0]
 8000958:	4b08      	ldr	r3, [pc, #32]	; (800097c <updateClockBuffer+0x70>)
 800095a:	fb83 2301 	smull	r2, r3, r3, r1
 800095e:	109a      	asrs	r2, r3, #2
 8000960:	17cb      	asrs	r3, r1, #31
 8000962:	1ad2      	subs	r2, r2, r3
 8000964:	4613      	mov	r3, r2
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	4413      	add	r3, r2
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	1aca      	subs	r2, r1, r3
 800096e:	4b04      	ldr	r3, [pc, #16]	; (8000980 <updateClockBuffer+0x74>)
 8000970:	60da      	str	r2, [r3, #12]
}
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr
 800097c:	66666667 	.word	0x66666667
 8000980:	20000100 	.word	0x20000100

08000984 <clearAllLED>:

void clearAllLED(){
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8000988:	2201      	movs	r2, #1
 800098a:	2102      	movs	r1, #2
 800098c:	480e      	ldr	r0, [pc, #56]	; (80009c8 <clearAllLED+0x44>)
 800098e:	f000 ff7e 	bl	800188e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8000992:	2201      	movs	r2, #1
 8000994:	2101      	movs	r1, #1
 8000996:	480c      	ldr	r0, [pc, #48]	; (80009c8 <clearAllLED+0x44>)
 8000998:	f000 ff79 	bl	800188e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 800099c:	2201      	movs	r2, #1
 800099e:	2104      	movs	r1, #4
 80009a0:	4809      	ldr	r0, [pc, #36]	; (80009c8 <clearAllLED+0x44>)
 80009a2:	f000 ff74 	bl	800188e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 80009a6:	2201      	movs	r2, #1
 80009a8:	2110      	movs	r1, #16
 80009aa:	4807      	ldr	r0, [pc, #28]	; (80009c8 <clearAllLED+0x44>)
 80009ac:	f000 ff6f 	bl	800188e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 80009b0:	2201      	movs	r2, #1
 80009b2:	2108      	movs	r1, #8
 80009b4:	4804      	ldr	r0, [pc, #16]	; (80009c8 <clearAllLED+0x44>)
 80009b6:	f000 ff6a 	bl	800188e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 80009ba:	2201      	movs	r2, #1
 80009bc:	2120      	movs	r1, #32
 80009be:	4802      	ldr	r0, [pc, #8]	; (80009c8 <clearAllLED+0x44>)
 80009c0:	f000 ff65 	bl	800188e <HAL_GPIO_WritePin>
}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40010800 	.word	0x40010800

080009cc <turnonTrafficLight1>:

void turnonTrafficLight1(int led){
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	switch(led){
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2b03      	cmp	r3, #3
 80009d8:	d029      	beq.n	8000a2e <turnonTrafficLight1+0x62>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2b03      	cmp	r3, #3
 80009de:	dc35      	bgt.n	8000a4c <turnonTrafficLight1+0x80>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d003      	beq.n	80009ee <turnonTrafficLight1+0x22>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d010      	beq.n	8000a0e <turnonTrafficLight1+0x42>
	case YELLOW:
		HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
		HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
		HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, RESET);
	default:
		break;
 80009ec:	e02e      	b.n	8000a4c <turnonTrafficLight1+0x80>
		HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 80009ee:	2201      	movs	r2, #1
 80009f0:	2102      	movs	r1, #2
 80009f2:	4819      	ldr	r0, [pc, #100]	; (8000a58 <turnonTrafficLight1+0x8c>)
 80009f4:	f000 ff4b 	bl	800188e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2101      	movs	r1, #1
 80009fc:	4816      	ldr	r0, [pc, #88]	; (8000a58 <turnonTrafficLight1+0x8c>)
 80009fe:	f000 ff46 	bl	800188e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8000a02:	2201      	movs	r2, #1
 8000a04:	2104      	movs	r1, #4
 8000a06:	4814      	ldr	r0, [pc, #80]	; (8000a58 <turnonTrafficLight1+0x8c>)
 8000a08:	f000 ff41 	bl	800188e <HAL_GPIO_WritePin>
		break;
 8000a0c:	e01f      	b.n	8000a4e <turnonTrafficLight1+0x82>
		HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2102      	movs	r1, #2
 8000a12:	4811      	ldr	r0, [pc, #68]	; (8000a58 <turnonTrafficLight1+0x8c>)
 8000a14:	f000 ff3b 	bl	800188e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	480e      	ldr	r0, [pc, #56]	; (8000a58 <turnonTrafficLight1+0x8c>)
 8000a1e:	f000 ff36 	bl	800188e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8000a22:	2201      	movs	r2, #1
 8000a24:	2104      	movs	r1, #4
 8000a26:	480c      	ldr	r0, [pc, #48]	; (8000a58 <turnonTrafficLight1+0x8c>)
 8000a28:	f000 ff31 	bl	800188e <HAL_GPIO_WritePin>
		break;
 8000a2c:	e00f      	b.n	8000a4e <turnonTrafficLight1+0x82>
		HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	2102      	movs	r1, #2
 8000a32:	4809      	ldr	r0, [pc, #36]	; (8000a58 <turnonTrafficLight1+0x8c>)
 8000a34:	f000 ff2b 	bl	800188e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	4806      	ldr	r0, [pc, #24]	; (8000a58 <turnonTrafficLight1+0x8c>)
 8000a3e:	f000 ff26 	bl	800188e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2104      	movs	r1, #4
 8000a46:	4804      	ldr	r0, [pc, #16]	; (8000a58 <turnonTrafficLight1+0x8c>)
 8000a48:	f000 ff21 	bl	800188e <HAL_GPIO_WritePin>
		break;
 8000a4c:	bf00      	nop
	}
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40010800 	.word	0x40010800

08000a5c <turnonTrafficLight2>:

void turnonTrafficLight2(int led){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	switch(led){
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2b03      	cmp	r3, #3
 8000a68:	d029      	beq.n	8000abe <turnonTrafficLight2+0x62>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2b03      	cmp	r3, #3
 8000a6e:	dc35      	bgt.n	8000adc <turnonTrafficLight2+0x80>
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d003      	beq.n	8000a7e <turnonTrafficLight2+0x22>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2b02      	cmp	r3, #2
 8000a7a:	d010      	beq.n	8000a9e <turnonTrafficLight2+0x42>
	case YELLOW:
		HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
		HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
		HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, RESET);
	default:
		break;
 8000a7c:	e02e      	b.n	8000adc <turnonTrafficLight2+0x80>
		HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 8000a7e:	2201      	movs	r2, #1
 8000a80:	2110      	movs	r1, #16
 8000a82:	4819      	ldr	r0, [pc, #100]	; (8000ae8 <turnonTrafficLight2+0x8c>)
 8000a84:	f000 ff03 	bl	800188e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2108      	movs	r1, #8
 8000a8c:	4816      	ldr	r0, [pc, #88]	; (8000ae8 <turnonTrafficLight2+0x8c>)
 8000a8e:	f000 fefe 	bl	800188e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8000a92:	2201      	movs	r2, #1
 8000a94:	2120      	movs	r1, #32
 8000a96:	4814      	ldr	r0, [pc, #80]	; (8000ae8 <turnonTrafficLight2+0x8c>)
 8000a98:	f000 fef9 	bl	800188e <HAL_GPIO_WritePin>
		break;
 8000a9c:	e01f      	b.n	8000ade <turnonTrafficLight2+0x82>
		HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2110      	movs	r1, #16
 8000aa2:	4811      	ldr	r0, [pc, #68]	; (8000ae8 <turnonTrafficLight2+0x8c>)
 8000aa4:	f000 fef3 	bl	800188e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	2108      	movs	r1, #8
 8000aac:	480e      	ldr	r0, [pc, #56]	; (8000ae8 <turnonTrafficLight2+0x8c>)
 8000aae:	f000 feee 	bl	800188e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	2120      	movs	r1, #32
 8000ab6:	480c      	ldr	r0, [pc, #48]	; (8000ae8 <turnonTrafficLight2+0x8c>)
 8000ab8:	f000 fee9 	bl	800188e <HAL_GPIO_WritePin>
		break;
 8000abc:	e00f      	b.n	8000ade <turnonTrafficLight2+0x82>
		HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 8000abe:	2201      	movs	r2, #1
 8000ac0:	2110      	movs	r1, #16
 8000ac2:	4809      	ldr	r0, [pc, #36]	; (8000ae8 <turnonTrafficLight2+0x8c>)
 8000ac4:	f000 fee3 	bl	800188e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 8000ac8:	2201      	movs	r2, #1
 8000aca:	2108      	movs	r1, #8
 8000acc:	4806      	ldr	r0, [pc, #24]	; (8000ae8 <turnonTrafficLight2+0x8c>)
 8000ace:	f000 fede 	bl	800188e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2120      	movs	r1, #32
 8000ad6:	4804      	ldr	r0, [pc, #16]	; (8000ae8 <turnonTrafficLight2+0x8c>)
 8000ad8:	f000 fed9 	bl	800188e <HAL_GPIO_WritePin>
		break;
 8000adc:	bf00      	nop
	}
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40010800 	.word	0x40010800

08000aec <toggleLedRED>:

void toggleLedRED(){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 8000af0:	2101      	movs	r1, #1
 8000af2:	4804      	ldr	r0, [pc, #16]	; (8000b04 <toggleLedRED+0x18>)
 8000af4:	f000 fee3 	bl	80018be <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
 8000af8:	2108      	movs	r1, #8
 8000afa:	4802      	ldr	r0, [pc, #8]	; (8000b04 <toggleLedRED+0x18>)
 8000afc:	f000 fedf 	bl	80018be <HAL_GPIO_TogglePin>
}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40010800 	.word	0x40010800

08000b08 <toggleLedYELLOW>:

void toggleLedYELLOW(){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
 8000b0c:	2104      	movs	r1, #4
 8000b0e:	4804      	ldr	r0, [pc, #16]	; (8000b20 <toggleLedYELLOW+0x18>)
 8000b10:	f000 fed5 	bl	80018be <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
 8000b14:	2120      	movs	r1, #32
 8000b16:	4802      	ldr	r0, [pc, #8]	; (8000b20 <toggleLedYELLOW+0x18>)
 8000b18:	f000 fed1 	bl	80018be <HAL_GPIO_TogglePin>
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40010800 	.word	0x40010800

08000b24 <toggleLedGREEN>:

void toggleLedGREEN(){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 8000b28:	2102      	movs	r1, #2
 8000b2a:	4804      	ldr	r0, [pc, #16]	; (8000b3c <toggleLedGREEN+0x18>)
 8000b2c:	f000 fec7 	bl	80018be <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
 8000b30:	2110      	movs	r1, #16
 8000b32:	4802      	ldr	r0, [pc, #8]	; (8000b3c <toggleLedGREEN+0x18>)
 8000b34:	f000 fec3 	bl	80018be <HAL_GPIO_TogglePin>
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40010800 	.word	0x40010800

08000b40 <update4_7SEG>:

void update4_7SEG(){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
	update7SEG(index_led);
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <update4_7SEG+0x2c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fe53 	bl	80007f4 <update7SEG>
	index_led++;
 8000b4e:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <update4_7SEG+0x2c>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	3301      	adds	r3, #1
 8000b54:	4a05      	ldr	r2, [pc, #20]	; (8000b6c <update4_7SEG+0x2c>)
 8000b56:	6013      	str	r3, [r2, #0]
	if(index_led >= MAX_LED) index_led = 0;
 8000b58:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <update4_7SEG+0x2c>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2b03      	cmp	r3, #3
 8000b5e:	dd02      	ble.n	8000b66 <update4_7SEG+0x26>
 8000b60:	4b02      	ldr	r3, [pc, #8]	; (8000b6c <update4_7SEG+0x2c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200000fc 	.word	0x200000fc

08000b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b74:	f000 fb8a 	bl	800128c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b78:	f000 f82e 	bl	8000bd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000b7c:	f000 f868 	bl	8000c50 <MX_TIM2_Init>
  MX_GPIO_Init();
 8000b80:	f000 f8b2 	bl	8000ce8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b84:	480e      	ldr	r0, [pc, #56]	; (8000bc0 <main+0x50>)
 8000b86:	f001 fafb 	bl	8002180 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <main+0x54>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	601a      	str	r2, [r3, #0]
  index_led = 0;
 8000b90:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <main+0x58>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
  SCH_Init();
 8000b96:	f000 f955 	bl	8000e44 <SCH_Init>
  SCH_Add_Task(update4_7SEG, 26, 25);
 8000b9a:	2219      	movs	r2, #25
 8000b9c:	211a      	movs	r1, #26
 8000b9e:	480b      	ldr	r0, [pc, #44]	; (8000bcc <main+0x5c>)
 8000ba0:	f000 f966 	bl	8000e70 <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic_run, 1, 1);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	4809      	ldr	r0, [pc, #36]	; (8000bd0 <main+0x60>)
 8000baa:	f000 f961 	bl	8000e70 <SCH_Add_Task>
  SCH_Add_Task(fsm_manual_run, 1, 1);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	4808      	ldr	r0, [pc, #32]	; (8000bd4 <main+0x64>)
 8000bb4:	f000 f95c 	bl	8000e70 <SCH_Add_Task>
  while (1)
  {

	  SCH_Dispatch_Tasks();
 8000bb8:	f000 fa06 	bl	8000fc8 <SCH_Dispatch_Tasks>
 8000bbc:	e7fc      	b.n	8000bb8 <main+0x48>
 8000bbe:	bf00      	nop
 8000bc0:	20000128 	.word	0x20000128
 8000bc4:	200000f8 	.word	0x200000f8
 8000bc8:	200000fc 	.word	0x200000fc
 8000bcc:	08000b41 	.word	0x08000b41
 8000bd0:	08000341 	.word	0x08000341
 8000bd4:	0800051d 	.word	0x0800051d

08000bd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b090      	sub	sp, #64	; 0x40
 8000bdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bde:	f107 0318 	add.w	r3, r7, #24
 8000be2:	2228      	movs	r2, #40	; 0x28
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f001 fe9c 	bl	8002924 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
 8000bf8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c02:	2310      	movs	r3, #16
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0a:	f107 0318 	add.w	r3, r7, #24
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 fe8a 	bl	8001928 <HAL_RCC_OscConfig>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c1a:	f000 f8e1 	bl	8000de0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c1e:	230f      	movs	r3, #15
 8000c20:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f001 f8f6 	bl	8001e28 <HAL_RCC_ClockConfig>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c42:	f000 f8cd 	bl	8000de0 <Error_Handler>
  }
}
 8000c46:	bf00      	nop
 8000c48:	3740      	adds	r7, #64	; 0x40
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c56:	f107 0308 	add.w	r3, r7, #8
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c64:	463b      	mov	r3, r7
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ce4 <MX_TIM2_Init+0x94>)
 8000c6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c74:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <MX_TIM2_Init+0x94>)
 8000c76:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7c:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <MX_TIM2_Init+0x94>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c82:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <MX_TIM2_Init+0x94>)
 8000c84:	2209      	movs	r2, #9
 8000c86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c88:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <MX_TIM2_Init+0x94>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <MX_TIM2_Init+0x94>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c94:	4813      	ldr	r0, [pc, #76]	; (8000ce4 <MX_TIM2_Init+0x94>)
 8000c96:	f001 fa23 	bl	80020e0 <HAL_TIM_Base_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ca0:	f000 f89e 	bl	8000de0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000caa:	f107 0308 	add.w	r3, r7, #8
 8000cae:	4619      	mov	r1, r3
 8000cb0:	480c      	ldr	r0, [pc, #48]	; (8000ce4 <MX_TIM2_Init+0x94>)
 8000cb2:	f001 fbb9 	bl	8002428 <HAL_TIM_ConfigClockSource>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000cbc:	f000 f890 	bl	8000de0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cc8:	463b      	mov	r3, r7
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <MX_TIM2_Init+0x94>)
 8000cce:	f001 fd85 	bl	80027dc <HAL_TIMEx_MasterConfigSynchronization>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000cd8:	f000 f882 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cdc:	bf00      	nop
 8000cde:	3718      	adds	r7, #24
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000128 	.word	0x20000128

08000ce8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b088      	sub	sp, #32
 8000cec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cee:	f107 0310 	add.w	r3, r7, #16
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfc:	4b2e      	ldr	r3, [pc, #184]	; (8000db8 <MX_GPIO_Init+0xd0>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	4a2d      	ldr	r2, [pc, #180]	; (8000db8 <MX_GPIO_Init+0xd0>)
 8000d02:	f043 0310 	orr.w	r3, r3, #16
 8000d06:	6193      	str	r3, [r2, #24]
 8000d08:	4b2b      	ldr	r3, [pc, #172]	; (8000db8 <MX_GPIO_Init+0xd0>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	f003 0310 	and.w	r3, r3, #16
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d14:	4b28      	ldr	r3, [pc, #160]	; (8000db8 <MX_GPIO_Init+0xd0>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	4a27      	ldr	r2, [pc, #156]	; (8000db8 <MX_GPIO_Init+0xd0>)
 8000d1a:	f043 0304 	orr.w	r3, r3, #4
 8000d1e:	6193      	str	r3, [r2, #24]
 8000d20:	4b25      	ldr	r3, [pc, #148]	; (8000db8 <MX_GPIO_Init+0xd0>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	f003 0304 	and.w	r3, r3, #4
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2c:	4b22      	ldr	r3, [pc, #136]	; (8000db8 <MX_GPIO_Init+0xd0>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4a21      	ldr	r2, [pc, #132]	; (8000db8 <MX_GPIO_Init+0xd0>)
 8000d32:	f043 0308 	orr.w	r3, r3, #8
 8000d36:	6193      	str	r3, [r2, #24]
 8000d38:	4b1f      	ldr	r3, [pc, #124]	; (8000db8 <MX_GPIO_Init+0xd0>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	f003 0308 	and.w	r3, r3, #8
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_GREEN1_Pin|LED_YELLOW1_Pin|LED_RED2_Pin
 8000d44:	2200      	movs	r2, #0
 8000d46:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000d4a:	481c      	ldr	r0, [pc, #112]	; (8000dbc <MX_GPIO_Init+0xd4>)
 8000d4c:	f000 fd9f 	bl	800188e <HAL_GPIO_WritePin>
                          |LED_GREEN2_Pin|LED_YELLOW2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG7_A_Pin|SEG7_B_Pin|SEG7_C_Pin|SEG7_D_Pin
 8000d50:	2200      	movs	r2, #0
 8000d52:	217f      	movs	r1, #127	; 0x7f
 8000d54:	481a      	ldr	r0, [pc, #104]	; (8000dc0 <MX_GPIO_Init+0xd8>)
 8000d56:	f000 fd9a 	bl	800188e <HAL_GPIO_WritePin>
                          |SEG7_E_Pin|SEG7_F_Pin|SEG7_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8000d5a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000d5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d64:	2301      	movs	r3, #1
 8000d66:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d68:	f107 0310 	add.w	r3, r7, #16
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4815      	ldr	r0, [pc, #84]	; (8000dc4 <MX_GPIO_Init+0xdc>)
 8000d70:	f000 fbfc 	bl	800156c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED1_Pin LED_GREEN1_Pin LED_YELLOW1_Pin LED_RED2_Pin
                           LED_GREEN2_Pin LED_YELLOW2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_GREEN1_Pin|LED_YELLOW1_Pin|LED_RED2_Pin
 8000d74:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000d78:	613b      	str	r3, [r7, #16]
                          |LED_GREEN2_Pin|LED_YELLOW2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2302      	movs	r3, #2
 8000d84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d86:	f107 0310 	add.w	r3, r7, #16
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	480b      	ldr	r0, [pc, #44]	; (8000dbc <MX_GPIO_Init+0xd4>)
 8000d8e:	f000 fbed 	bl	800156c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG7_A_Pin SEG7_B_Pin SEG7_C_Pin SEG7_D_Pin
                           SEG7_E_Pin SEG7_F_Pin SEG7_G_Pin */
  GPIO_InitStruct.Pin = SEG7_A_Pin|SEG7_B_Pin|SEG7_C_Pin|SEG7_D_Pin
 8000d92:	237f      	movs	r3, #127	; 0x7f
 8000d94:	613b      	str	r3, [r7, #16]
                          |SEG7_E_Pin|SEG7_F_Pin|SEG7_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d96:	2301      	movs	r3, #1
 8000d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da2:	f107 0310 	add.w	r3, r7, #16
 8000da6:	4619      	mov	r1, r3
 8000da8:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <MX_GPIO_Init+0xd8>)
 8000daa:	f000 fbdf 	bl	800156c <HAL_GPIO_Init>

}
 8000dae:	bf00      	nop
 8000db0:	3720      	adds	r7, #32
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	40010800 	.word	0x40010800
 8000dc0:	40010c00 	.word	0x40010c00
 8000dc4:	40011000 	.word	0x40011000

08000dc8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000dd0:	f000 f8d6 	bl	8000f80 <SCH_Update>
	getKeyInput();
 8000dd4:	f7ff f9e4 	bl	80001a0 <getKeyInput>
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de4:	b672      	cpsid	i
}
 8000de6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <Error_Handler+0x8>
	...

08000dec <get_new_ID>:
sTask *head = NULL;

uint8_t current_index_task = 0;
int deleted_ID = -1;

uint32_t get_new_ID(){
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
	uint32_t newID;
    if(deleted_ID >= 0){
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <get_new_ID+0x40>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	db08      	blt.n	8000e0c <get_new_ID+0x20>
    	newID = deleted_ID;
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <get_new_ID+0x40>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	607b      	str	r3, [r7, #4]
    	deleted_ID = -1;
 8000e00:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <get_new_ID+0x40>)
 8000e02:	f04f 32ff 	mov.w	r2, #4294967295
 8000e06:	601a      	str	r2, [r3, #0]
    	return newID;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	e009      	b.n	8000e20 <get_new_ID+0x34>
    }
    else{
    	newID = current_index_task;
 8000e0c:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <get_new_ID+0x44>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	607b      	str	r3, [r7, #4]
		current_index_task++;
 8000e12:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <get_new_ID+0x44>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	3301      	adds	r3, #1
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <get_new_ID+0x44>)
 8000e1c:	701a      	strb	r2, [r3, #0]
		return newID;
 8000e1e:	687b      	ldr	r3, [r7, #4]
    }
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	20000054 	.word	0x20000054
 8000e30:	20000114 	.word	0x20000114

08000e34 <SCH_Go_To_Sleep>:

void SCH_Go_To_Sleep(){
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
	// Enter low-power mode (Sleep mode). The MCU will wake up on the next interrupt
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000e38:	2101      	movs	r1, #1
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f000 fd58 	bl	80018f0 <HAL_PWR_EnterSLEEPMode>
}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <SCH_Init>:

void SCH_Init(void){
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
	head = NULL;
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <SCH_Init+0x20>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
	current_index_task = 0;
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <SCH_Init+0x24>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]
	deleted_ID = -1;
 8000e54:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <SCH_Init+0x28>)
 8000e56:	f04f 32ff 	mov.w	r2, #4294967295
 8000e5a:	601a      	str	r2, [r3, #0]
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr
 8000e64:	20000110 	.word	0x20000110
 8000e68:	20000114 	.word	0x20000114
 8000e6c:	20000054 	.word	0x20000054

08000e70 <SCH_Add_Task>:

uint32_t SCH_Add_Task(void (*p_function)(), uint32_t DELAY, uint32_t PERIOD){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b088      	sub	sp, #32
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
	sTask *newTask = (sTask*)malloc(sizeof(sTask));
 8000e7c:	2018      	movs	r0, #24
 8000e7e:	f001 fd41 	bl	8002904 <malloc>
 8000e82:	4603      	mov	r3, r0
 8000e84:	613b      	str	r3, [r7, #16]
    newTask->pTask = p_function;
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	68fa      	ldr	r2, [r7, #12]
 8000e8a:	601a      	str	r2, [r3, #0]
    newTask->Delay = DELAY;
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	605a      	str	r2, [r3, #4]
    newTask->Period = PERIOD;
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	609a      	str	r2, [r3, #8]
    newTask->RunMe = 0;
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	731a      	strb	r2, [r3, #12]
    newTask->TaskID = get_new_ID();
 8000e9e:	f7ff ffa5 	bl	8000dec <get_new_ID>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	611a      	str	r2, [r3, #16]
    newTask->next = NULL;
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	615a      	str	r2, [r3, #20]

    if(head == NULL){
 8000eae:	4b33      	ldr	r3, [pc, #204]	; (8000f7c <SCH_Add_Task+0x10c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d109      	bne.n	8000eca <SCH_Add_Task+0x5a>
    	newTask->next = head;
 8000eb6:	4b31      	ldr	r3, [pc, #196]	; (8000f7c <SCH_Add_Task+0x10c>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	615a      	str	r2, [r3, #20]
        head = newTask;
 8000ebe:	4a2f      	ldr	r2, [pc, #188]	; (8000f7c <SCH_Add_Task+0x10c>)
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	6013      	str	r3, [r2, #0]
        return newTask->TaskID;
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	691b      	ldr	r3, [r3, #16]
 8000ec8:	e053      	b.n	8000f72 <SCH_Add_Task+0x102>
    }

    uint32_t sumDelay = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
    sTask *current = head;
 8000ece:	4b2b      	ldr	r3, [pc, #172]	; (8000f7c <SCH_Add_Task+0x10c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	61bb      	str	r3, [r7, #24]
    sTask *prev = NULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
    while(current != NULL && (sumDelay + current->Delay) <= DELAY){
 8000ed8:	e009      	b.n	8000eee <SCH_Add_Task+0x7e>
    	sumDelay += current->Delay;
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	69fa      	ldr	r2, [r7, #28]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	61fb      	str	r3, [r7, #28]
    	prev = current;
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	617b      	str	r3, [r7, #20]
    	current = current->next;
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	695b      	ldr	r3, [r3, #20]
 8000eec:	61bb      	str	r3, [r7, #24]
    while(current != NULL && (sumDelay + current->Delay) <= DELAY){
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d006      	beq.n	8000f02 <SCH_Add_Task+0x92>
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	685a      	ldr	r2, [r3, #4]
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	4413      	add	r3, r2
 8000efc:	68ba      	ldr	r2, [r7, #8]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d2eb      	bcs.n	8000eda <SCH_Add_Task+0x6a>
    }

    if (current != NULL){
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d026      	beq.n	8000f56 <SCH_Add_Task+0xe6>
        if (prev != NULL){
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d013      	beq.n	8000f36 <SCH_Add_Task+0xc6>
        	newTask->Delay -= sumDelay;
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	685a      	ldr	r2, [r3, #4]
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	1ad2      	subs	r2, r2, r3
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	605a      	str	r2, [r3, #4]
        	current->Delay -= newTask->Delay;
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	685a      	ldr	r2, [r3, #4]
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	1ad2      	subs	r2, r2, r3
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	605a      	str	r2, [r3, #4]
        	newTask->next = current;
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	615a      	str	r2, [r3, #20]
            prev->next = newTask;
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	615a      	str	r2, [r3, #20]
 8000f34:	e01b      	b.n	8000f6e <SCH_Add_Task+0xfe>
        }
        else{
        	newTask->next = head;
 8000f36:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <SCH_Add_Task+0x10c>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	615a      	str	r2, [r3, #20]
        	head = newTask;
 8000f3e:	4a0f      	ldr	r2, [pc, #60]	; (8000f7c <SCH_Add_Task+0x10c>)
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	6013      	str	r3, [r2, #0]
        	newTask->next->Delay -= DELAY;
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	695b      	ldr	r3, [r3, #20]
 8000f48:	6859      	ldr	r1, [r3, #4]
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	1a8a      	subs	r2, r1, r2
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	e00b      	b.n	8000f6e <SCH_Add_Task+0xfe>
        }
    }
    else{
    	newTask->Delay -= sumDelay;
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	685a      	ldr	r2, [r3, #4]
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	1ad2      	subs	r2, r2, r3
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	605a      	str	r2, [r3, #4]
    	newTask->next = current;
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	615a      	str	r2, [r3, #20]
    	prev->next = newTask;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	615a      	str	r2, [r3, #20]
    }
    return newTask->TaskID;
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	691b      	ldr	r3, [r3, #16]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3720      	adds	r7, #32
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000110 	.word	0x20000110

08000f80 <SCH_Update>:

void SCH_Update(void){
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
	if(head != NULL){
 8000f84:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <SCH_Update+0x44>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d016      	beq.n	8000fba <SCH_Update+0x3a>
		if(head->Delay > 0){
 8000f8c:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <SCH_Update+0x44>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d004      	beq.n	8000fa0 <SCH_Update+0x20>
			head->Delay--;
 8000f96:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <SCH_Update+0x44>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	3a01      	subs	r2, #1
 8000f9e:	605a      	str	r2, [r3, #4]
		}
		if(head->Delay == 0){
 8000fa0:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <SCH_Update+0x44>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d107      	bne.n	8000fba <SCH_Update+0x3a>
			head->RunMe +=1;
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <SCH_Update+0x44>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	7b1a      	ldrb	r2, [r3, #12]
 8000fb0:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <SCH_Update+0x44>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	3201      	adds	r2, #1
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	731a      	strb	r2, [r3, #12]
		}
	}
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20000110 	.word	0x20000110

08000fc8 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	if(head == NULL) return;
 8000fcc:	4b20      	ldr	r3, [pc, #128]	; (8001050 <SCH_Dispatch_Tasks+0x88>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d03b      	beq.n	800104c <SCH_Dispatch_Tasks+0x84>
	if(head->RunMe > 0){
 8000fd4:	4b1e      	ldr	r3, [pc, #120]	; (8001050 <SCH_Dispatch_Tasks+0x88>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	7b1b      	ldrb	r3, [r3, #12]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d033      	beq.n	8001046 <SCH_Dispatch_Tasks+0x7e>
		(*head->pTask)();
 8000fde:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <SCH_Dispatch_Tasks+0x88>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4798      	blx	r3
		head->RunMe--;
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <SCH_Dispatch_Tasks+0x88>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	7b1a      	ldrb	r2, [r3, #12]
 8000fec:	3a01      	subs	r2, #1
 8000fee:	b2d2      	uxtb	r2, r2
 8000ff0:	731a      	strb	r2, [r3, #12]

		deleted_ID = head->TaskID;
 8000ff2:	4b17      	ldr	r3, [pc, #92]	; (8001050 <SCH_Dispatch_Tasks+0x88>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	691b      	ldr	r3, [r3, #16]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b16      	ldr	r3, [pc, #88]	; (8001054 <SCH_Dispatch_Tasks+0x8c>)
 8000ffc:	601a      	str	r2, [r3, #0]
		if(head->Period > 0) {
 8000ffe:	4b14      	ldr	r3, [pc, #80]	; (8001050 <SCH_Dispatch_Tasks+0x88>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d00b      	beq.n	8001020 <SCH_Dispatch_Tasks+0x58>
			SCH_Add_Task(head->pTask, head->Period, head->Period);
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <SCH_Dispatch_Tasks+0x88>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	6818      	ldr	r0, [r3, #0]
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <SCH_Dispatch_Tasks+0x88>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	6899      	ldr	r1, [r3, #8]
 8001014:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <SCH_Dispatch_Tasks+0x88>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	461a      	mov	r2, r3
 800101c:	f7ff ff28 	bl	8000e70 <SCH_Add_Task>
		}
		SCH_Delete_Task(head->TaskID);
 8001020:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <SCH_Dispatch_Tasks+0x88>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	691b      	ldr	r3, [r3, #16]
 8001026:	4618      	mov	r0, r3
 8001028:	f000 f816 	bl	8001058 <SCH_Delete_Task>

		if(head->Delay <= 0) head->RunMe += 1;
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <SCH_Dispatch_Tasks+0x88>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d107      	bne.n	8001046 <SCH_Dispatch_Tasks+0x7e>
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <SCH_Dispatch_Tasks+0x88>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	7b1a      	ldrb	r2, [r3, #12]
 800103c:	4b04      	ldr	r3, [pc, #16]	; (8001050 <SCH_Dispatch_Tasks+0x88>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	3201      	adds	r2, #1
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	731a      	strb	r2, [r3, #12]
	}
	SCH_Go_To_Sleep();
 8001046:	f7ff fef5 	bl	8000e34 <SCH_Go_To_Sleep>
 800104a:	e000      	b.n	800104e <SCH_Dispatch_Tasks+0x86>
	if(head == NULL) return;
 800104c:	bf00      	nop
}
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000110 	.word	0x20000110
 8001054:	20000054 	.word	0x20000054

08001058 <SCH_Delete_Task>:

void SCH_Delete_Task(uint32_t TASK_ID){
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]

    sTask *current = head;
 8001060:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <SCH_Delete_Task+0x5c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	60fb      	str	r3, [r7, #12]
    sTask *prev = NULL;
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]

    while(current != NULL && current->TaskID != TASK_ID) {
 800106a:	e004      	b.n	8001076 <SCH_Delete_Task+0x1e>
        prev = current;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	60bb      	str	r3, [r7, #8]
        current = current->next;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	695b      	ldr	r3, [r3, #20]
 8001074:	60fb      	str	r3, [r7, #12]
    while(current != NULL && current->TaskID != TASK_ID) {
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d004      	beq.n	8001086 <SCH_Delete_Task+0x2e>
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	691b      	ldr	r3, [r3, #16]
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	429a      	cmp	r2, r3
 8001084:	d1f2      	bne.n	800106c <SCH_Delete_Task+0x14>
    }
    if (current != NULL){
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d00e      	beq.n	80010aa <SCH_Delete_Task+0x52>
        if (prev != NULL){
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d004      	beq.n	800109c <SCH_Delete_Task+0x44>
            prev->next = current->next;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	695a      	ldr	r2, [r3, #20]
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	615a      	str	r2, [r3, #20]
 800109a:	e003      	b.n	80010a4 <SCH_Delete_Task+0x4c>
        }
        else{
            head = current->next;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	695b      	ldr	r3, [r3, #20]
 80010a0:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <SCH_Delete_Task+0x5c>)
 80010a2:	6013      	str	r3, [r2, #0]
        }
        free(current);
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	f001 fc35 	bl	8002914 <free>
    }
}
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000110 	.word	0x20000110

080010b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <HAL_MspInit+0x5c>)
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	4a14      	ldr	r2, [pc, #80]	; (8001114 <HAL_MspInit+0x5c>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6193      	str	r3, [r2, #24]
 80010ca:	4b12      	ldr	r3, [pc, #72]	; (8001114 <HAL_MspInit+0x5c>)
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d6:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <HAL_MspInit+0x5c>)
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	4a0e      	ldr	r2, [pc, #56]	; (8001114 <HAL_MspInit+0x5c>)
 80010dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e0:	61d3      	str	r3, [r2, #28]
 80010e2:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <HAL_MspInit+0x5c>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <HAL_MspInit+0x60>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	4a04      	ldr	r2, [pc, #16]	; (8001118 <HAL_MspInit+0x60>)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110a:	bf00      	nop
 800110c:	3714      	adds	r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr
 8001114:	40021000 	.word	0x40021000
 8001118:	40010000 	.word	0x40010000

0800111c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800112c:	d113      	bne.n	8001156 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <HAL_TIM_Base_MspInit+0x44>)
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	4a0b      	ldr	r2, [pc, #44]	; (8001160 <HAL_TIM_Base_MspInit+0x44>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	61d3      	str	r3, [r2, #28]
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <HAL_TIM_Base_MspInit+0x44>)
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2100      	movs	r1, #0
 800114a:	201c      	movs	r0, #28
 800114c:	f000 f9d7 	bl	80014fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001150:	201c      	movs	r0, #28
 8001152:	f000 f9f0 	bl	8001536 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40021000 	.word	0x40021000

08001164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <NMI_Handler+0x4>

0800116a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800116e:	e7fe      	b.n	800116e <HardFault_Handler+0x4>

08001170 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <MemManage_Handler+0x4>

08001176 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800117a:	e7fe      	b.n	800117a <BusFault_Handler+0x4>

0800117c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <UsageFault_Handler+0x4>

08001182 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr

0800118e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr

0800119a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr

080011a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011aa:	f000 f8b5 	bl	8001318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011b8:	4802      	ldr	r0, [pc, #8]	; (80011c4 <TIM2_IRQHandler+0x10>)
 80011ba:	f001 f82d 	bl	8002218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000128 	.word	0x20000128

080011c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011d0:	4a14      	ldr	r2, [pc, #80]	; (8001224 <_sbrk+0x5c>)
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <_sbrk+0x60>)
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011dc:	4b13      	ldr	r3, [pc, #76]	; (800122c <_sbrk+0x64>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d102      	bne.n	80011ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011e4:	4b11      	ldr	r3, [pc, #68]	; (800122c <_sbrk+0x64>)
 80011e6:	4a12      	ldr	r2, [pc, #72]	; (8001230 <_sbrk+0x68>)
 80011e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ea:	4b10      	ldr	r3, [pc, #64]	; (800122c <_sbrk+0x64>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4413      	add	r3, r2
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d207      	bcs.n	8001208 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011f8:	f001 fb5a 	bl	80028b0 <__errno>
 80011fc:	4603      	mov	r3, r0
 80011fe:	220c      	movs	r2, #12
 8001200:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001202:	f04f 33ff 	mov.w	r3, #4294967295
 8001206:	e009      	b.n	800121c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <_sbrk+0x64>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800120e:	4b07      	ldr	r3, [pc, #28]	; (800122c <_sbrk+0x64>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4413      	add	r3, r2
 8001216:	4a05      	ldr	r2, [pc, #20]	; (800122c <_sbrk+0x64>)
 8001218:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800121a:	68fb      	ldr	r3, [r7, #12]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20002800 	.word	0x20002800
 8001228:	00000400 	.word	0x00000400
 800122c:	20000118 	.word	0x20000118
 8001230:	20000188 	.word	0x20000188

08001234 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr

08001240 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001240:	f7ff fff8 	bl	8001234 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001244:	480b      	ldr	r0, [pc, #44]	; (8001274 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001246:	490c      	ldr	r1, [pc, #48]	; (8001278 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001248:	4a0c      	ldr	r2, [pc, #48]	; (800127c <LoopFillZerobss+0x16>)
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800124c:	e002      	b.n	8001254 <LoopCopyDataInit>

0800124e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001252:	3304      	adds	r3, #4

08001254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001258:	d3f9      	bcc.n	800124e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800125a:	4a09      	ldr	r2, [pc, #36]	; (8001280 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800125c:	4c09      	ldr	r4, [pc, #36]	; (8001284 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001260:	e001      	b.n	8001266 <LoopFillZerobss>

08001262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001264:	3204      	adds	r2, #4

08001266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001268:	d3fb      	bcc.n	8001262 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800126a:	f001 fb27 	bl	80028bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800126e:	f7ff fc7f 	bl	8000b70 <main>
  bx lr
 8001272:	4770      	bx	lr
  ldr r0, =_sdata
 8001274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001278:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 800127c:	08002b00 	.word	0x08002b00
  ldr r2, =_sbss
 8001280:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8001284:	20000184 	.word	0x20000184

08001288 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001288:	e7fe      	b.n	8001288 <ADC1_2_IRQHandler>
	...

0800128c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <HAL_Init+0x28>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a07      	ldr	r2, [pc, #28]	; (80012b4 <HAL_Init+0x28>)
 8001296:	f043 0310 	orr.w	r3, r3, #16
 800129a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800129c:	2003      	movs	r0, #3
 800129e:	f000 f923 	bl	80014e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012a2:	200f      	movs	r0, #15
 80012a4:	f000 f808 	bl	80012b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012a8:	f7ff ff06 	bl	80010b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40022000 	.word	0x40022000

080012b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <HAL_InitTick+0x54>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <HAL_InitTick+0x58>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	4619      	mov	r1, r3
 80012ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80012d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 f93b 	bl	8001552 <HAL_SYSTICK_Config>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e00e      	b.n	8001304 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b0f      	cmp	r3, #15
 80012ea:	d80a      	bhi.n	8001302 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ec:	2200      	movs	r2, #0
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	f04f 30ff 	mov.w	r0, #4294967295
 80012f4:	f000 f903 	bl	80014fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f8:	4a06      	ldr	r2, [pc, #24]	; (8001314 <HAL_InitTick+0x5c>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012fe:	2300      	movs	r3, #0
 8001300:	e000      	b.n	8001304 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
}
 8001304:	4618      	mov	r0, r3
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000058 	.word	0x20000058
 8001310:	20000060 	.word	0x20000060
 8001314:	2000005c 	.word	0x2000005c

08001318 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <HAL_IncTick+0x1c>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	461a      	mov	r2, r3
 8001322:	4b05      	ldr	r3, [pc, #20]	; (8001338 <HAL_IncTick+0x20>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4413      	add	r3, r2
 8001328:	4a03      	ldr	r2, [pc, #12]	; (8001338 <HAL_IncTick+0x20>)
 800132a:	6013      	str	r3, [r2, #0]
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr
 8001334:	20000060 	.word	0x20000060
 8001338:	20000170 	.word	0x20000170

0800133c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return uwTick;
 8001340:	4b02      	ldr	r3, [pc, #8]	; (800134c <HAL_GetTick+0x10>)
 8001342:	681b      	ldr	r3, [r3, #0]
}
 8001344:	4618      	mov	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr
 800134c:	20000170 	.word	0x20000170

08001350 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <__NVIC_SetPriorityGrouping+0x44>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001366:	68ba      	ldr	r2, [r7, #8]
 8001368:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800136c:	4013      	ands	r3, r2
 800136e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001378:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800137c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001382:	4a04      	ldr	r2, [pc, #16]	; (8001394 <__NVIC_SetPriorityGrouping+0x44>)
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	60d3      	str	r3, [r2, #12]
}
 8001388:	bf00      	nop
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800139c:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <__NVIC_GetPriorityGrouping+0x18>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	0a1b      	lsrs	r3, r3, #8
 80013a2:	f003 0307 	and.w	r3, r3, #7
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	db0b      	blt.n	80013de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	f003 021f 	and.w	r2, r3, #31
 80013cc:	4906      	ldr	r1, [pc, #24]	; (80013e8 <__NVIC_EnableIRQ+0x34>)
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	095b      	lsrs	r3, r3, #5
 80013d4:	2001      	movs	r0, #1
 80013d6:	fa00 f202 	lsl.w	r2, r0, r2
 80013da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr
 80013e8:	e000e100 	.word	0xe000e100

080013ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	6039      	str	r1, [r7, #0]
 80013f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	db0a      	blt.n	8001416 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	b2da      	uxtb	r2, r3
 8001404:	490c      	ldr	r1, [pc, #48]	; (8001438 <__NVIC_SetPriority+0x4c>)
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	0112      	lsls	r2, r2, #4
 800140c:	b2d2      	uxtb	r2, r2
 800140e:	440b      	add	r3, r1
 8001410:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001414:	e00a      	b.n	800142c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	b2da      	uxtb	r2, r3
 800141a:	4908      	ldr	r1, [pc, #32]	; (800143c <__NVIC_SetPriority+0x50>)
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	f003 030f 	and.w	r3, r3, #15
 8001422:	3b04      	subs	r3, #4
 8001424:	0112      	lsls	r2, r2, #4
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	440b      	add	r3, r1
 800142a:	761a      	strb	r2, [r3, #24]
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000e100 	.word	0xe000e100
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001440:	b480      	push	{r7}
 8001442:	b089      	sub	sp, #36	; 0x24
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f1c3 0307 	rsb	r3, r3, #7
 800145a:	2b04      	cmp	r3, #4
 800145c:	bf28      	it	cs
 800145e:	2304      	movcs	r3, #4
 8001460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3304      	adds	r3, #4
 8001466:	2b06      	cmp	r3, #6
 8001468:	d902      	bls.n	8001470 <NVIC_EncodePriority+0x30>
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3b03      	subs	r3, #3
 800146e:	e000      	b.n	8001472 <NVIC_EncodePriority+0x32>
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001474:	f04f 32ff 	mov.w	r2, #4294967295
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43da      	mvns	r2, r3
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	401a      	ands	r2, r3
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001488:	f04f 31ff 	mov.w	r1, #4294967295
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	fa01 f303 	lsl.w	r3, r1, r3
 8001492:	43d9      	mvns	r1, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001498:	4313      	orrs	r3, r2
         );
}
 800149a:	4618      	mov	r0, r3
 800149c:	3724      	adds	r7, #36	; 0x24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr

080014a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014b4:	d301      	bcc.n	80014ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014b6:	2301      	movs	r3, #1
 80014b8:	e00f      	b.n	80014da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ba:	4a0a      	ldr	r2, [pc, #40]	; (80014e4 <SysTick_Config+0x40>)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3b01      	subs	r3, #1
 80014c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014c2:	210f      	movs	r1, #15
 80014c4:	f04f 30ff 	mov.w	r0, #4294967295
 80014c8:	f7ff ff90 	bl	80013ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014cc:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <SysTick_Config+0x40>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014d2:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <SysTick_Config+0x40>)
 80014d4:	2207      	movs	r2, #7
 80014d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	e000e010 	.word	0xe000e010

080014e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff ff2d 	bl	8001350 <__NVIC_SetPriorityGrouping>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014fe:	b580      	push	{r7, lr}
 8001500:	b086      	sub	sp, #24
 8001502:	af00      	add	r7, sp, #0
 8001504:	4603      	mov	r3, r0
 8001506:	60b9      	str	r1, [r7, #8]
 8001508:	607a      	str	r2, [r7, #4]
 800150a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001510:	f7ff ff42 	bl	8001398 <__NVIC_GetPriorityGrouping>
 8001514:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	68b9      	ldr	r1, [r7, #8]
 800151a:	6978      	ldr	r0, [r7, #20]
 800151c:	f7ff ff90 	bl	8001440 <NVIC_EncodePriority>
 8001520:	4602      	mov	r2, r0
 8001522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001526:	4611      	mov	r1, r2
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ff5f 	bl	80013ec <__NVIC_SetPriority>
}
 800152e:	bf00      	nop
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	4603      	mov	r3, r0
 800153e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff ff35 	bl	80013b4 <__NVIC_EnableIRQ>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff ffa2 	bl	80014a4 <SysTick_Config>
 8001560:	4603      	mov	r3, r0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800156c:	b480      	push	{r7}
 800156e:	b08b      	sub	sp, #44	; 0x2c
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001576:	2300      	movs	r3, #0
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800157a:	2300      	movs	r3, #0
 800157c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800157e:	e148      	b.n	8001812 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001580:	2201      	movs	r2, #1
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	69fa      	ldr	r2, [r7, #28]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	429a      	cmp	r2, r3
 800159a:	f040 8137 	bne.w	800180c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	4aa3      	ldr	r2, [pc, #652]	; (8001830 <HAL_GPIO_Init+0x2c4>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d05e      	beq.n	8001666 <HAL_GPIO_Init+0xfa>
 80015a8:	4aa1      	ldr	r2, [pc, #644]	; (8001830 <HAL_GPIO_Init+0x2c4>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d875      	bhi.n	800169a <HAL_GPIO_Init+0x12e>
 80015ae:	4aa1      	ldr	r2, [pc, #644]	; (8001834 <HAL_GPIO_Init+0x2c8>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d058      	beq.n	8001666 <HAL_GPIO_Init+0xfa>
 80015b4:	4a9f      	ldr	r2, [pc, #636]	; (8001834 <HAL_GPIO_Init+0x2c8>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d86f      	bhi.n	800169a <HAL_GPIO_Init+0x12e>
 80015ba:	4a9f      	ldr	r2, [pc, #636]	; (8001838 <HAL_GPIO_Init+0x2cc>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d052      	beq.n	8001666 <HAL_GPIO_Init+0xfa>
 80015c0:	4a9d      	ldr	r2, [pc, #628]	; (8001838 <HAL_GPIO_Init+0x2cc>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d869      	bhi.n	800169a <HAL_GPIO_Init+0x12e>
 80015c6:	4a9d      	ldr	r2, [pc, #628]	; (800183c <HAL_GPIO_Init+0x2d0>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d04c      	beq.n	8001666 <HAL_GPIO_Init+0xfa>
 80015cc:	4a9b      	ldr	r2, [pc, #620]	; (800183c <HAL_GPIO_Init+0x2d0>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d863      	bhi.n	800169a <HAL_GPIO_Init+0x12e>
 80015d2:	4a9b      	ldr	r2, [pc, #620]	; (8001840 <HAL_GPIO_Init+0x2d4>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d046      	beq.n	8001666 <HAL_GPIO_Init+0xfa>
 80015d8:	4a99      	ldr	r2, [pc, #612]	; (8001840 <HAL_GPIO_Init+0x2d4>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d85d      	bhi.n	800169a <HAL_GPIO_Init+0x12e>
 80015de:	2b12      	cmp	r3, #18
 80015e0:	d82a      	bhi.n	8001638 <HAL_GPIO_Init+0xcc>
 80015e2:	2b12      	cmp	r3, #18
 80015e4:	d859      	bhi.n	800169a <HAL_GPIO_Init+0x12e>
 80015e6:	a201      	add	r2, pc, #4	; (adr r2, 80015ec <HAL_GPIO_Init+0x80>)
 80015e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ec:	08001667 	.word	0x08001667
 80015f0:	08001641 	.word	0x08001641
 80015f4:	08001653 	.word	0x08001653
 80015f8:	08001695 	.word	0x08001695
 80015fc:	0800169b 	.word	0x0800169b
 8001600:	0800169b 	.word	0x0800169b
 8001604:	0800169b 	.word	0x0800169b
 8001608:	0800169b 	.word	0x0800169b
 800160c:	0800169b 	.word	0x0800169b
 8001610:	0800169b 	.word	0x0800169b
 8001614:	0800169b 	.word	0x0800169b
 8001618:	0800169b 	.word	0x0800169b
 800161c:	0800169b 	.word	0x0800169b
 8001620:	0800169b 	.word	0x0800169b
 8001624:	0800169b 	.word	0x0800169b
 8001628:	0800169b 	.word	0x0800169b
 800162c:	0800169b 	.word	0x0800169b
 8001630:	08001649 	.word	0x08001649
 8001634:	0800165d 	.word	0x0800165d
 8001638:	4a82      	ldr	r2, [pc, #520]	; (8001844 <HAL_GPIO_Init+0x2d8>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d013      	beq.n	8001666 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800163e:	e02c      	b.n	800169a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	623b      	str	r3, [r7, #32]
          break;
 8001646:	e029      	b.n	800169c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	3304      	adds	r3, #4
 800164e:	623b      	str	r3, [r7, #32]
          break;
 8001650:	e024      	b.n	800169c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	3308      	adds	r3, #8
 8001658:	623b      	str	r3, [r7, #32]
          break;
 800165a:	e01f      	b.n	800169c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	330c      	adds	r3, #12
 8001662:	623b      	str	r3, [r7, #32]
          break;
 8001664:	e01a      	b.n	800169c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d102      	bne.n	8001674 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800166e:	2304      	movs	r3, #4
 8001670:	623b      	str	r3, [r7, #32]
          break;
 8001672:	e013      	b.n	800169c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d105      	bne.n	8001688 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800167c:	2308      	movs	r3, #8
 800167e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	69fa      	ldr	r2, [r7, #28]
 8001684:	611a      	str	r2, [r3, #16]
          break;
 8001686:	e009      	b.n	800169c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001688:	2308      	movs	r3, #8
 800168a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69fa      	ldr	r2, [r7, #28]
 8001690:	615a      	str	r2, [r3, #20]
          break;
 8001692:	e003      	b.n	800169c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001694:	2300      	movs	r3, #0
 8001696:	623b      	str	r3, [r7, #32]
          break;
 8001698:	e000      	b.n	800169c <HAL_GPIO_Init+0x130>
          break;
 800169a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	2bff      	cmp	r3, #255	; 0xff
 80016a0:	d801      	bhi.n	80016a6 <HAL_GPIO_Init+0x13a>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	e001      	b.n	80016aa <HAL_GPIO_Init+0x13e>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3304      	adds	r3, #4
 80016aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	2bff      	cmp	r3, #255	; 0xff
 80016b0:	d802      	bhi.n	80016b8 <HAL_GPIO_Init+0x14c>
 80016b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	e002      	b.n	80016be <HAL_GPIO_Init+0x152>
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	3b08      	subs	r3, #8
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	210f      	movs	r1, #15
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	fa01 f303 	lsl.w	r3, r1, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	401a      	ands	r2, r3
 80016d0:	6a39      	ldr	r1, [r7, #32]
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	fa01 f303 	lsl.w	r3, r1, r3
 80016d8:	431a      	orrs	r2, r3
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 8090 	beq.w	800180c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016ec:	4b56      	ldr	r3, [pc, #344]	; (8001848 <HAL_GPIO_Init+0x2dc>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	4a55      	ldr	r2, [pc, #340]	; (8001848 <HAL_GPIO_Init+0x2dc>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	6193      	str	r3, [r2, #24]
 80016f8:	4b53      	ldr	r3, [pc, #332]	; (8001848 <HAL_GPIO_Init+0x2dc>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001704:	4a51      	ldr	r2, [pc, #324]	; (800184c <HAL_GPIO_Init+0x2e0>)
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	089b      	lsrs	r3, r3, #2
 800170a:	3302      	adds	r3, #2
 800170c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001710:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	f003 0303 	and.w	r3, r3, #3
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	220f      	movs	r2, #15
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	4013      	ands	r3, r2
 8001726:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a49      	ldr	r2, [pc, #292]	; (8001850 <HAL_GPIO_Init+0x2e4>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d00d      	beq.n	800174c <HAL_GPIO_Init+0x1e0>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a48      	ldr	r2, [pc, #288]	; (8001854 <HAL_GPIO_Init+0x2e8>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d007      	beq.n	8001748 <HAL_GPIO_Init+0x1dc>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a47      	ldr	r2, [pc, #284]	; (8001858 <HAL_GPIO_Init+0x2ec>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d101      	bne.n	8001744 <HAL_GPIO_Init+0x1d8>
 8001740:	2302      	movs	r3, #2
 8001742:	e004      	b.n	800174e <HAL_GPIO_Init+0x1e2>
 8001744:	2303      	movs	r3, #3
 8001746:	e002      	b.n	800174e <HAL_GPIO_Init+0x1e2>
 8001748:	2301      	movs	r3, #1
 800174a:	e000      	b.n	800174e <HAL_GPIO_Init+0x1e2>
 800174c:	2300      	movs	r3, #0
 800174e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001750:	f002 0203 	and.w	r2, r2, #3
 8001754:	0092      	lsls	r2, r2, #2
 8001756:	4093      	lsls	r3, r2
 8001758:	68fa      	ldr	r2, [r7, #12]
 800175a:	4313      	orrs	r3, r2
 800175c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800175e:	493b      	ldr	r1, [pc, #236]	; (800184c <HAL_GPIO_Init+0x2e0>)
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	089b      	lsrs	r3, r3, #2
 8001764:	3302      	adds	r3, #2
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d006      	beq.n	8001786 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001778:	4b38      	ldr	r3, [pc, #224]	; (800185c <HAL_GPIO_Init+0x2f0>)
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	4937      	ldr	r1, [pc, #220]	; (800185c <HAL_GPIO_Init+0x2f0>)
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	4313      	orrs	r3, r2
 8001782:	608b      	str	r3, [r1, #8]
 8001784:	e006      	b.n	8001794 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001786:	4b35      	ldr	r3, [pc, #212]	; (800185c <HAL_GPIO_Init+0x2f0>)
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	43db      	mvns	r3, r3
 800178e:	4933      	ldr	r1, [pc, #204]	; (800185c <HAL_GPIO_Init+0x2f0>)
 8001790:	4013      	ands	r3, r2
 8001792:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d006      	beq.n	80017ae <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017a0:	4b2e      	ldr	r3, [pc, #184]	; (800185c <HAL_GPIO_Init+0x2f0>)
 80017a2:	68da      	ldr	r2, [r3, #12]
 80017a4:	492d      	ldr	r1, [pc, #180]	; (800185c <HAL_GPIO_Init+0x2f0>)
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	60cb      	str	r3, [r1, #12]
 80017ac:	e006      	b.n	80017bc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017ae:	4b2b      	ldr	r3, [pc, #172]	; (800185c <HAL_GPIO_Init+0x2f0>)
 80017b0:	68da      	ldr	r2, [r3, #12]
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	43db      	mvns	r3, r3
 80017b6:	4929      	ldr	r1, [pc, #164]	; (800185c <HAL_GPIO_Init+0x2f0>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d006      	beq.n	80017d6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017c8:	4b24      	ldr	r3, [pc, #144]	; (800185c <HAL_GPIO_Init+0x2f0>)
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	4923      	ldr	r1, [pc, #140]	; (800185c <HAL_GPIO_Init+0x2f0>)
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	604b      	str	r3, [r1, #4]
 80017d4:	e006      	b.n	80017e4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017d6:	4b21      	ldr	r3, [pc, #132]	; (800185c <HAL_GPIO_Init+0x2f0>)
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	43db      	mvns	r3, r3
 80017de:	491f      	ldr	r1, [pc, #124]	; (800185c <HAL_GPIO_Init+0x2f0>)
 80017e0:	4013      	ands	r3, r2
 80017e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d006      	beq.n	80017fe <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017f0:	4b1a      	ldr	r3, [pc, #104]	; (800185c <HAL_GPIO_Init+0x2f0>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4919      	ldr	r1, [pc, #100]	; (800185c <HAL_GPIO_Init+0x2f0>)
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	600b      	str	r3, [r1, #0]
 80017fc:	e006      	b.n	800180c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017fe:	4b17      	ldr	r3, [pc, #92]	; (800185c <HAL_GPIO_Init+0x2f0>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	43db      	mvns	r3, r3
 8001806:	4915      	ldr	r1, [pc, #84]	; (800185c <HAL_GPIO_Init+0x2f0>)
 8001808:	4013      	ands	r3, r2
 800180a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	3301      	adds	r3, #1
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	fa22 f303 	lsr.w	r3, r2, r3
 800181c:	2b00      	cmp	r3, #0
 800181e:	f47f aeaf 	bne.w	8001580 <HAL_GPIO_Init+0x14>
  }
}
 8001822:	bf00      	nop
 8001824:	bf00      	nop
 8001826:	372c      	adds	r7, #44	; 0x2c
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	10320000 	.word	0x10320000
 8001834:	10310000 	.word	0x10310000
 8001838:	10220000 	.word	0x10220000
 800183c:	10210000 	.word	0x10210000
 8001840:	10120000 	.word	0x10120000
 8001844:	10110000 	.word	0x10110000
 8001848:	40021000 	.word	0x40021000
 800184c:	40010000 	.word	0x40010000
 8001850:	40010800 	.word	0x40010800
 8001854:	40010c00 	.word	0x40010c00
 8001858:	40011000 	.word	0x40011000
 800185c:	40010400 	.word	0x40010400

08001860 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	887b      	ldrh	r3, [r7, #2]
 8001872:	4013      	ands	r3, r2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d002      	beq.n	800187e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001878:	2301      	movs	r3, #1
 800187a:	73fb      	strb	r3, [r7, #15]
 800187c:	e001      	b.n	8001882 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800187e:	2300      	movs	r3, #0
 8001880:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001882:	7bfb      	ldrb	r3, [r7, #15]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr

0800188e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
 8001896:	460b      	mov	r3, r1
 8001898:	807b      	strh	r3, [r7, #2]
 800189a:	4613      	mov	r3, r2
 800189c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800189e:	787b      	ldrb	r3, [r7, #1]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018a4:	887a      	ldrh	r2, [r7, #2]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018aa:	e003      	b.n	80018b4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018ac:	887b      	ldrh	r3, [r7, #2]
 80018ae:	041a      	lsls	r2, r3, #16
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	611a      	str	r2, [r3, #16]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr

080018be <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018be:	b480      	push	{r7}
 80018c0:	b085      	sub	sp, #20
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
 80018c6:	460b      	mov	r3, r1
 80018c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018d0:	887a      	ldrh	r2, [r7, #2]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	4013      	ands	r3, r2
 80018d6:	041a      	lsls	r2, r3, #16
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	43d9      	mvns	r1, r3
 80018dc:	887b      	ldrh	r3, [r7, #2]
 80018de:	400b      	ands	r3, r1
 80018e0:	431a      	orrs	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	611a      	str	r2, [r3, #16]
}
 80018e6:	bf00      	nop
 80018e8:	3714      	adds	r7, #20
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr

080018f0 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80018fc:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_PWR_EnterSLEEPMode+0x34>)
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	4a08      	ldr	r2, [pc, #32]	; (8001924 <HAL_PWR_EnterSLEEPMode+0x34>)
 8001902:	f023 0304 	bic.w	r3, r3, #4
 8001906:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001908:	78fb      	ldrb	r3, [r7, #3]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d101      	bne.n	8001912 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800190e:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8001910:	e002      	b.n	8001918 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8001912:	bf40      	sev
    __WFE();
 8001914:	bf20      	wfe
    __WFE();
 8001916:	bf20      	wfe
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e26c      	b.n	8001e14 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 8087 	beq.w	8001a56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001948:	4b92      	ldr	r3, [pc, #584]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 030c 	and.w	r3, r3, #12
 8001950:	2b04      	cmp	r3, #4
 8001952:	d00c      	beq.n	800196e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001954:	4b8f      	ldr	r3, [pc, #572]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 030c 	and.w	r3, r3, #12
 800195c:	2b08      	cmp	r3, #8
 800195e:	d112      	bne.n	8001986 <HAL_RCC_OscConfig+0x5e>
 8001960:	4b8c      	ldr	r3, [pc, #560]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800196c:	d10b      	bne.n	8001986 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800196e:	4b89      	ldr	r3, [pc, #548]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d06c      	beq.n	8001a54 <HAL_RCC_OscConfig+0x12c>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d168      	bne.n	8001a54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e246      	b.n	8001e14 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800198e:	d106      	bne.n	800199e <HAL_RCC_OscConfig+0x76>
 8001990:	4b80      	ldr	r3, [pc, #512]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a7f      	ldr	r2, [pc, #508]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800199a:	6013      	str	r3, [r2, #0]
 800199c:	e02e      	b.n	80019fc <HAL_RCC_OscConfig+0xd4>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d10c      	bne.n	80019c0 <HAL_RCC_OscConfig+0x98>
 80019a6:	4b7b      	ldr	r3, [pc, #492]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a7a      	ldr	r2, [pc, #488]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	4b78      	ldr	r3, [pc, #480]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a77      	ldr	r2, [pc, #476]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e01d      	b.n	80019fc <HAL_RCC_OscConfig+0xd4>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0xbc>
 80019ca:	4b72      	ldr	r3, [pc, #456]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a71      	ldr	r2, [pc, #452]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	4b6f      	ldr	r3, [pc, #444]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a6e      	ldr	r2, [pc, #440]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e00b      	b.n	80019fc <HAL_RCC_OscConfig+0xd4>
 80019e4:	4b6b      	ldr	r3, [pc, #428]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a6a      	ldr	r2, [pc, #424]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b68      	ldr	r3, [pc, #416]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a67      	ldr	r2, [pc, #412]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d013      	beq.n	8001a2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a04:	f7ff fc9a 	bl	800133c <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fc96 	bl	800133c <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	; 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e1fa      	b.n	8001e14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1e:	4b5d      	ldr	r3, [pc, #372]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0xe4>
 8001a2a:	e014      	b.n	8001a56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fc86 	bl	800133c <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff fc82 	bl	800133c <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e1e6      	b.n	8001e14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a46:	4b53      	ldr	r3, [pc, #332]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0x10c>
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d063      	beq.n	8001b2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a62:	4b4c      	ldr	r3, [pc, #304]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d00b      	beq.n	8001a86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a6e:	4b49      	ldr	r3, [pc, #292]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 030c 	and.w	r3, r3, #12
 8001a76:	2b08      	cmp	r3, #8
 8001a78:	d11c      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x18c>
 8001a7a:	4b46      	ldr	r3, [pc, #280]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d116      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a86:	4b43      	ldr	r3, [pc, #268]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d005      	beq.n	8001a9e <HAL_RCC_OscConfig+0x176>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d001      	beq.n	8001a9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e1ba      	b.n	8001e14 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a9e:	4b3d      	ldr	r3, [pc, #244]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	4939      	ldr	r1, [pc, #228]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ab2:	e03a      	b.n	8001b2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d020      	beq.n	8001afe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001abc:	4b36      	ldr	r3, [pc, #216]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac2:	f7ff fc3b 	bl	800133c <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aca:	f7ff fc37 	bl	800133c <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e19b      	b.n	8001e14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001adc:	4b2d      	ldr	r3, [pc, #180]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0f0      	beq.n	8001aca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae8:	4b2a      	ldr	r3, [pc, #168]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	4927      	ldr	r1, [pc, #156]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	600b      	str	r3, [r1, #0]
 8001afc:	e015      	b.n	8001b2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001afe:	4b26      	ldr	r3, [pc, #152]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b04:	f7ff fc1a 	bl	800133c <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b0c:	f7ff fc16 	bl	800133c <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e17a      	b.n	8001e14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b1e:	4b1d      	ldr	r3, [pc, #116]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f0      	bne.n	8001b0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d03a      	beq.n	8001bac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d019      	beq.n	8001b72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b3e:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <HAL_RCC_OscConfig+0x274>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b44:	f7ff fbfa 	bl	800133c <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b4c:	f7ff fbf6 	bl	800133c <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e15a      	b.n	8001e14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b5e:	4b0d      	ldr	r3, [pc, #52]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b6a:	2001      	movs	r0, #1
 8001b6c:	f000 fa9a 	bl	80020a4 <RCC_Delay>
 8001b70:	e01c      	b.n	8001bac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b72:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <HAL_RCC_OscConfig+0x274>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b78:	f7ff fbe0 	bl	800133c <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b7e:	e00f      	b.n	8001ba0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b80:	f7ff fbdc 	bl	800133c <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d908      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e140      	b.n	8001e14 <HAL_RCC_OscConfig+0x4ec>
 8001b92:	bf00      	nop
 8001b94:	40021000 	.word	0x40021000
 8001b98:	42420000 	.word	0x42420000
 8001b9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba0:	4b9e      	ldr	r3, [pc, #632]	; (8001e1c <HAL_RCC_OscConfig+0x4f4>)
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1e9      	bne.n	8001b80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 80a6 	beq.w	8001d06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bbe:	4b97      	ldr	r3, [pc, #604]	; (8001e1c <HAL_RCC_OscConfig+0x4f4>)
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10d      	bne.n	8001be6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bca:	4b94      	ldr	r3, [pc, #592]	; (8001e1c <HAL_RCC_OscConfig+0x4f4>)
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	4a93      	ldr	r2, [pc, #588]	; (8001e1c <HAL_RCC_OscConfig+0x4f4>)
 8001bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd4:	61d3      	str	r3, [r2, #28]
 8001bd6:	4b91      	ldr	r3, [pc, #580]	; (8001e1c <HAL_RCC_OscConfig+0x4f4>)
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bde:	60bb      	str	r3, [r7, #8]
 8001be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001be2:	2301      	movs	r3, #1
 8001be4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be6:	4b8e      	ldr	r3, [pc, #568]	; (8001e20 <HAL_RCC_OscConfig+0x4f8>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d118      	bne.n	8001c24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bf2:	4b8b      	ldr	r3, [pc, #556]	; (8001e20 <HAL_RCC_OscConfig+0x4f8>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a8a      	ldr	r2, [pc, #552]	; (8001e20 <HAL_RCC_OscConfig+0x4f8>)
 8001bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bfe:	f7ff fb9d 	bl	800133c <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c06:	f7ff fb99 	bl	800133c <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b64      	cmp	r3, #100	; 0x64
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e0fd      	b.n	8001e14 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c18:	4b81      	ldr	r3, [pc, #516]	; (8001e20 <HAL_RCC_OscConfig+0x4f8>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0f0      	beq.n	8001c06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d106      	bne.n	8001c3a <HAL_RCC_OscConfig+0x312>
 8001c2c:	4b7b      	ldr	r3, [pc, #492]	; (8001e1c <HAL_RCC_OscConfig+0x4f4>)
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	4a7a      	ldr	r2, [pc, #488]	; (8001e1c <HAL_RCC_OscConfig+0x4f4>)
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	6213      	str	r3, [r2, #32]
 8001c38:	e02d      	b.n	8001c96 <HAL_RCC_OscConfig+0x36e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10c      	bne.n	8001c5c <HAL_RCC_OscConfig+0x334>
 8001c42:	4b76      	ldr	r3, [pc, #472]	; (8001e1c <HAL_RCC_OscConfig+0x4f4>)
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	4a75      	ldr	r2, [pc, #468]	; (8001e1c <HAL_RCC_OscConfig+0x4f4>)
 8001c48:	f023 0301 	bic.w	r3, r3, #1
 8001c4c:	6213      	str	r3, [r2, #32]
 8001c4e:	4b73      	ldr	r3, [pc, #460]	; (8001e1c <HAL_RCC_OscConfig+0x4f4>)
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	4a72      	ldr	r2, [pc, #456]	; (8001e1c <HAL_RCC_OscConfig+0x4f4>)
 8001c54:	f023 0304 	bic.w	r3, r3, #4
 8001c58:	6213      	str	r3, [r2, #32]
 8001c5a:	e01c      	b.n	8001c96 <HAL_RCC_OscConfig+0x36e>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	2b05      	cmp	r3, #5
 8001c62:	d10c      	bne.n	8001c7e <HAL_RCC_OscConfig+0x356>
 8001c64:	4b6d      	ldr	r3, [pc, #436]	; (8001e1c <HAL_RCC_OscConfig+0x4f4>)
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	4a6c      	ldr	r2, [pc, #432]	; (8001e1c <HAL_RCC_OscConfig+0x4f4>)
 8001c6a:	f043 0304 	orr.w	r3, r3, #4
 8001c6e:	6213      	str	r3, [r2, #32]
 8001c70:	4b6a      	ldr	r3, [pc, #424]	; (8001e1c <HAL_RCC_OscConfig+0x4f4>)
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	4a69      	ldr	r2, [pc, #420]	; (8001e1c <HAL_RCC_OscConfig+0x4f4>)
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	6213      	str	r3, [r2, #32]
 8001c7c:	e00b      	b.n	8001c96 <HAL_RCC_OscConfig+0x36e>
 8001c7e:	4b67      	ldr	r3, [pc, #412]	; (8001e1c <HAL_RCC_OscConfig+0x4f4>)
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	4a66      	ldr	r2, [pc, #408]	; (8001e1c <HAL_RCC_OscConfig+0x4f4>)
 8001c84:	f023 0301 	bic.w	r3, r3, #1
 8001c88:	6213      	str	r3, [r2, #32]
 8001c8a:	4b64      	ldr	r3, [pc, #400]	; (8001e1c <HAL_RCC_OscConfig+0x4f4>)
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	4a63      	ldr	r2, [pc, #396]	; (8001e1c <HAL_RCC_OscConfig+0x4f4>)
 8001c90:	f023 0304 	bic.w	r3, r3, #4
 8001c94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d015      	beq.n	8001cca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c9e:	f7ff fb4d 	bl	800133c <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca4:	e00a      	b.n	8001cbc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca6:	f7ff fb49 	bl	800133c <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e0ab      	b.n	8001e14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cbc:	4b57      	ldr	r3, [pc, #348]	; (8001e1c <HAL_RCC_OscConfig+0x4f4>)
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0ee      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x37e>
 8001cc8:	e014      	b.n	8001cf4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cca:	f7ff fb37 	bl	800133c <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd0:	e00a      	b.n	8001ce8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd2:	f7ff fb33 	bl	800133c <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e095      	b.n	8001e14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce8:	4b4c      	ldr	r3, [pc, #304]	; (8001e1c <HAL_RCC_OscConfig+0x4f4>)
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1ee      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cf4:	7dfb      	ldrb	r3, [r7, #23]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d105      	bne.n	8001d06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cfa:	4b48      	ldr	r3, [pc, #288]	; (8001e1c <HAL_RCC_OscConfig+0x4f4>)
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	4a47      	ldr	r2, [pc, #284]	; (8001e1c <HAL_RCC_OscConfig+0x4f4>)
 8001d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 8081 	beq.w	8001e12 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d10:	4b42      	ldr	r3, [pc, #264]	; (8001e1c <HAL_RCC_OscConfig+0x4f4>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 030c 	and.w	r3, r3, #12
 8001d18:	2b08      	cmp	r3, #8
 8001d1a:	d061      	beq.n	8001de0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69db      	ldr	r3, [r3, #28]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d146      	bne.n	8001db2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d24:	4b3f      	ldr	r3, [pc, #252]	; (8001e24 <HAL_RCC_OscConfig+0x4fc>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2a:	f7ff fb07 	bl	800133c <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d32:	f7ff fb03 	bl	800133c <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e067      	b.n	8001e14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d44:	4b35      	ldr	r3, [pc, #212]	; (8001e1c <HAL_RCC_OscConfig+0x4f4>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1f0      	bne.n	8001d32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d58:	d108      	bne.n	8001d6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d5a:	4b30      	ldr	r3, [pc, #192]	; (8001e1c <HAL_RCC_OscConfig+0x4f4>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	492d      	ldr	r1, [pc, #180]	; (8001e1c <HAL_RCC_OscConfig+0x4f4>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d6c:	4b2b      	ldr	r3, [pc, #172]	; (8001e1c <HAL_RCC_OscConfig+0x4f4>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a19      	ldr	r1, [r3, #32]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	430b      	orrs	r3, r1
 8001d7e:	4927      	ldr	r1, [pc, #156]	; (8001e1c <HAL_RCC_OscConfig+0x4f4>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d84:	4b27      	ldr	r3, [pc, #156]	; (8001e24 <HAL_RCC_OscConfig+0x4fc>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8a:	f7ff fad7 	bl	800133c <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d90:	e008      	b.n	8001da4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d92:	f7ff fad3 	bl	800133c <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e037      	b.n	8001e14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001da4:	4b1d      	ldr	r3, [pc, #116]	; (8001e1c <HAL_RCC_OscConfig+0x4f4>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0f0      	beq.n	8001d92 <HAL_RCC_OscConfig+0x46a>
 8001db0:	e02f      	b.n	8001e12 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db2:	4b1c      	ldr	r3, [pc, #112]	; (8001e24 <HAL_RCC_OscConfig+0x4fc>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7ff fac0 	bl	800133c <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc0:	f7ff fabc 	bl	800133c <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e020      	b.n	8001e14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dd2:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <HAL_RCC_OscConfig+0x4f4>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x498>
 8001dde:	e018      	b.n	8001e12 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	69db      	ldr	r3, [r3, #28]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d101      	bne.n	8001dec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e013      	b.n	8001e14 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dec:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <HAL_RCC_OscConfig+0x4f4>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d106      	bne.n	8001e0e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d001      	beq.n	8001e12 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e000      	b.n	8001e14 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40007000 	.word	0x40007000
 8001e24:	42420060 	.word	0x42420060

08001e28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d101      	bne.n	8001e3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e0d0      	b.n	8001fde <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e3c:	4b6a      	ldr	r3, [pc, #424]	; (8001fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0307 	and.w	r3, r3, #7
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d910      	bls.n	8001e6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4a:	4b67      	ldr	r3, [pc, #412]	; (8001fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f023 0207 	bic.w	r2, r3, #7
 8001e52:	4965      	ldr	r1, [pc, #404]	; (8001fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5a:	4b63      	ldr	r3, [pc, #396]	; (8001fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d001      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e0b8      	b.n	8001fde <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d020      	beq.n	8001eba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d005      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e84:	4b59      	ldr	r3, [pc, #356]	; (8001fec <HAL_RCC_ClockConfig+0x1c4>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	4a58      	ldr	r2, [pc, #352]	; (8001fec <HAL_RCC_ClockConfig+0x1c4>)
 8001e8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0308 	and.w	r3, r3, #8
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d005      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e9c:	4b53      	ldr	r3, [pc, #332]	; (8001fec <HAL_RCC_ClockConfig+0x1c4>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	4a52      	ldr	r2, [pc, #328]	; (8001fec <HAL_RCC_ClockConfig+0x1c4>)
 8001ea2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ea6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ea8:	4b50      	ldr	r3, [pc, #320]	; (8001fec <HAL_RCC_ClockConfig+0x1c4>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	494d      	ldr	r1, [pc, #308]	; (8001fec <HAL_RCC_ClockConfig+0x1c4>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d040      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d107      	bne.n	8001ede <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ece:	4b47      	ldr	r3, [pc, #284]	; (8001fec <HAL_RCC_ClockConfig+0x1c4>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d115      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e07f      	b.n	8001fde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d107      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ee6:	4b41      	ldr	r3, [pc, #260]	; (8001fec <HAL_RCC_ClockConfig+0x1c4>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d109      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e073      	b.n	8001fde <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef6:	4b3d      	ldr	r3, [pc, #244]	; (8001fec <HAL_RCC_ClockConfig+0x1c4>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e06b      	b.n	8001fde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f06:	4b39      	ldr	r3, [pc, #228]	; (8001fec <HAL_RCC_ClockConfig+0x1c4>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f023 0203 	bic.w	r2, r3, #3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	4936      	ldr	r1, [pc, #216]	; (8001fec <HAL_RCC_ClockConfig+0x1c4>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f18:	f7ff fa10 	bl	800133c <HAL_GetTick>
 8001f1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1e:	e00a      	b.n	8001f36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f20:	f7ff fa0c 	bl	800133c <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e053      	b.n	8001fde <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f36:	4b2d      	ldr	r3, [pc, #180]	; (8001fec <HAL_RCC_ClockConfig+0x1c4>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f003 020c 	and.w	r2, r3, #12
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d1eb      	bne.n	8001f20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f48:	4b27      	ldr	r3, [pc, #156]	; (8001fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d210      	bcs.n	8001f78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f56:	4b24      	ldr	r3, [pc, #144]	; (8001fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f023 0207 	bic.w	r2, r3, #7
 8001f5e:	4922      	ldr	r1, [pc, #136]	; (8001fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f66:	4b20      	ldr	r3, [pc, #128]	; (8001fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d001      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e032      	b.n	8001fde <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d008      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f84:	4b19      	ldr	r3, [pc, #100]	; (8001fec <HAL_RCC_ClockConfig+0x1c4>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	4916      	ldr	r1, [pc, #88]	; (8001fec <HAL_RCC_ClockConfig+0x1c4>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d009      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fa2:	4b12      	ldr	r3, [pc, #72]	; (8001fec <HAL_RCC_ClockConfig+0x1c4>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	490e      	ldr	r1, [pc, #56]	; (8001fec <HAL_RCC_ClockConfig+0x1c4>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fb6:	f000 f821 	bl	8001ffc <HAL_RCC_GetSysClockFreq>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <HAL_RCC_ClockConfig+0x1c4>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	091b      	lsrs	r3, r3, #4
 8001fc2:	f003 030f 	and.w	r3, r3, #15
 8001fc6:	490a      	ldr	r1, [pc, #40]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fc8:	5ccb      	ldrb	r3, [r1, r3]
 8001fca:	fa22 f303 	lsr.w	r3, r2, r3
 8001fce:	4a09      	ldr	r2, [pc, #36]	; (8001ff4 <HAL_RCC_ClockConfig+0x1cc>)
 8001fd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fd2:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <HAL_RCC_ClockConfig+0x1d0>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff f96e 	bl	80012b8 <HAL_InitTick>

  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40022000 	.word	0x40022000
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	08002ad4 	.word	0x08002ad4
 8001ff4:	20000058 	.word	0x20000058
 8001ff8:	2000005c 	.word	0x2000005c

08001ffc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b087      	sub	sp, #28
 8002000:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	2300      	movs	r3, #0
 8002008:	60bb      	str	r3, [r7, #8]
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
 800200e:	2300      	movs	r3, #0
 8002010:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002012:	2300      	movs	r3, #0
 8002014:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002016:	4b1e      	ldr	r3, [pc, #120]	; (8002090 <HAL_RCC_GetSysClockFreq+0x94>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f003 030c 	and.w	r3, r3, #12
 8002022:	2b04      	cmp	r3, #4
 8002024:	d002      	beq.n	800202c <HAL_RCC_GetSysClockFreq+0x30>
 8002026:	2b08      	cmp	r3, #8
 8002028:	d003      	beq.n	8002032 <HAL_RCC_GetSysClockFreq+0x36>
 800202a:	e027      	b.n	800207c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800202c:	4b19      	ldr	r3, [pc, #100]	; (8002094 <HAL_RCC_GetSysClockFreq+0x98>)
 800202e:	613b      	str	r3, [r7, #16]
      break;
 8002030:	e027      	b.n	8002082 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	0c9b      	lsrs	r3, r3, #18
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	4a17      	ldr	r2, [pc, #92]	; (8002098 <HAL_RCC_GetSysClockFreq+0x9c>)
 800203c:	5cd3      	ldrb	r3, [r2, r3]
 800203e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d010      	beq.n	800206c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800204a:	4b11      	ldr	r3, [pc, #68]	; (8002090 <HAL_RCC_GetSysClockFreq+0x94>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	0c5b      	lsrs	r3, r3, #17
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	4a11      	ldr	r2, [pc, #68]	; (800209c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002056:	5cd3      	ldrb	r3, [r2, r3]
 8002058:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a0d      	ldr	r2, [pc, #52]	; (8002094 <HAL_RCC_GetSysClockFreq+0x98>)
 800205e:	fb02 f203 	mul.w	r2, r2, r3
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	fbb2 f3f3 	udiv	r3, r2, r3
 8002068:	617b      	str	r3, [r7, #20]
 800206a:	e004      	b.n	8002076 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a0c      	ldr	r2, [pc, #48]	; (80020a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002070:	fb02 f303 	mul.w	r3, r2, r3
 8002074:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	613b      	str	r3, [r7, #16]
      break;
 800207a:	e002      	b.n	8002082 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <HAL_RCC_GetSysClockFreq+0x98>)
 800207e:	613b      	str	r3, [r7, #16]
      break;
 8002080:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002082:	693b      	ldr	r3, [r7, #16]
}
 8002084:	4618      	mov	r0, r3
 8002086:	371c      	adds	r7, #28
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40021000 	.word	0x40021000
 8002094:	007a1200 	.word	0x007a1200
 8002098:	08002ae4 	.word	0x08002ae4
 800209c:	08002af4 	.word	0x08002af4
 80020a0:	003d0900 	.word	0x003d0900

080020a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020ac:	4b0a      	ldr	r3, [pc, #40]	; (80020d8 <RCC_Delay+0x34>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a0a      	ldr	r2, [pc, #40]	; (80020dc <RCC_Delay+0x38>)
 80020b2:	fba2 2303 	umull	r2, r3, r2, r3
 80020b6:	0a5b      	lsrs	r3, r3, #9
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	fb02 f303 	mul.w	r3, r2, r3
 80020be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020c0:	bf00      	nop
  }
  while (Delay --);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	1e5a      	subs	r2, r3, #1
 80020c6:	60fa      	str	r2, [r7, #12]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1f9      	bne.n	80020c0 <RCC_Delay+0x1c>
}
 80020cc:	bf00      	nop
 80020ce:	bf00      	nop
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr
 80020d8:	20000058 	.word	0x20000058
 80020dc:	10624dd3 	.word	0x10624dd3

080020e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e041      	b.n	8002176 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d106      	bne.n	800210c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff f808 	bl	800111c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2202      	movs	r2, #2
 8002110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3304      	adds	r3, #4
 800211c:	4619      	mov	r1, r3
 800211e:	4610      	mov	r0, r2
 8002120:	f000 fa6e 	bl	8002600 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b01      	cmp	r3, #1
 8002192:	d001      	beq.n	8002198 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e035      	b.n	8002204 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2202      	movs	r2, #2
 800219c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 0201 	orr.w	r2, r2, #1
 80021ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a16      	ldr	r2, [pc, #88]	; (8002210 <HAL_TIM_Base_Start_IT+0x90>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d009      	beq.n	80021ce <HAL_TIM_Base_Start_IT+0x4e>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c2:	d004      	beq.n	80021ce <HAL_TIM_Base_Start_IT+0x4e>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a12      	ldr	r2, [pc, #72]	; (8002214 <HAL_TIM_Base_Start_IT+0x94>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d111      	bne.n	80021f2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2b06      	cmp	r3, #6
 80021de:	d010      	beq.n	8002202 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0201 	orr.w	r2, r2, #1
 80021ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021f0:	e007      	b.n	8002202 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f042 0201 	orr.w	r2, r2, #1
 8002200:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	bc80      	pop	{r7}
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40012c00 	.word	0x40012c00
 8002214:	40000400 	.word	0x40000400

08002218 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b02      	cmp	r3, #2
 800222c:	d122      	bne.n	8002274 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b02      	cmp	r3, #2
 800223a:	d11b      	bne.n	8002274 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f06f 0202 	mvn.w	r2, #2
 8002244:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f9b4 	bl	80025c8 <HAL_TIM_IC_CaptureCallback>
 8002260:	e005      	b.n	800226e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f9a7 	bl	80025b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 f9b6 	bl	80025da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	f003 0304 	and.w	r3, r3, #4
 800227e:	2b04      	cmp	r3, #4
 8002280:	d122      	bne.n	80022c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b04      	cmp	r3, #4
 800228e:	d11b      	bne.n	80022c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f06f 0204 	mvn.w	r2, #4
 8002298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2202      	movs	r2, #2
 800229e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f98a 	bl	80025c8 <HAL_TIM_IC_CaptureCallback>
 80022b4:	e005      	b.n	80022c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f97d 	bl	80025b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 f98c 	bl	80025da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d122      	bne.n	800231c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	f003 0308 	and.w	r3, r3, #8
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	d11b      	bne.n	800231c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f06f 0208 	mvn.w	r2, #8
 80022ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2204      	movs	r2, #4
 80022f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f960 	bl	80025c8 <HAL_TIM_IC_CaptureCallback>
 8002308:	e005      	b.n	8002316 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f953 	bl	80025b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 f962 	bl	80025da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	f003 0310 	and.w	r3, r3, #16
 8002326:	2b10      	cmp	r3, #16
 8002328:	d122      	bne.n	8002370 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	f003 0310 	and.w	r3, r3, #16
 8002334:	2b10      	cmp	r3, #16
 8002336:	d11b      	bne.n	8002370 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f06f 0210 	mvn.w	r2, #16
 8002340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2208      	movs	r2, #8
 8002346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 f936 	bl	80025c8 <HAL_TIM_IC_CaptureCallback>
 800235c:	e005      	b.n	800236a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f929 	bl	80025b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 f938 	bl	80025da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b01      	cmp	r3, #1
 800237c:	d10e      	bne.n	800239c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b01      	cmp	r3, #1
 800238a:	d107      	bne.n	800239c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f06f 0201 	mvn.w	r2, #1
 8002394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7fe fd16 	bl	8000dc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a6:	2b80      	cmp	r3, #128	; 0x80
 80023a8:	d10e      	bne.n	80023c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b4:	2b80      	cmp	r3, #128	; 0x80
 80023b6:	d107      	bne.n	80023c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 fa6b 	bl	800289e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d2:	2b40      	cmp	r3, #64	; 0x40
 80023d4:	d10e      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e0:	2b40      	cmp	r3, #64	; 0x40
 80023e2:	d107      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f8fc 	bl	80025ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	f003 0320 	and.w	r3, r3, #32
 80023fe:	2b20      	cmp	r3, #32
 8002400:	d10e      	bne.n	8002420 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f003 0320 	and.w	r3, r3, #32
 800240c:	2b20      	cmp	r3, #32
 800240e:	d107      	bne.n	8002420 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f06f 0220 	mvn.w	r2, #32
 8002418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 fa36 	bl	800288c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002420:	bf00      	nop
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002432:	2300      	movs	r3, #0
 8002434:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800243c:	2b01      	cmp	r3, #1
 800243e:	d101      	bne.n	8002444 <HAL_TIM_ConfigClockSource+0x1c>
 8002440:	2302      	movs	r3, #2
 8002442:	e0b4      	b.n	80025ae <HAL_TIM_ConfigClockSource+0x186>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800246a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68ba      	ldr	r2, [r7, #8]
 8002472:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800247c:	d03e      	beq.n	80024fc <HAL_TIM_ConfigClockSource+0xd4>
 800247e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002482:	f200 8087 	bhi.w	8002594 <HAL_TIM_ConfigClockSource+0x16c>
 8002486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800248a:	f000 8086 	beq.w	800259a <HAL_TIM_ConfigClockSource+0x172>
 800248e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002492:	d87f      	bhi.n	8002594 <HAL_TIM_ConfigClockSource+0x16c>
 8002494:	2b70      	cmp	r3, #112	; 0x70
 8002496:	d01a      	beq.n	80024ce <HAL_TIM_ConfigClockSource+0xa6>
 8002498:	2b70      	cmp	r3, #112	; 0x70
 800249a:	d87b      	bhi.n	8002594 <HAL_TIM_ConfigClockSource+0x16c>
 800249c:	2b60      	cmp	r3, #96	; 0x60
 800249e:	d050      	beq.n	8002542 <HAL_TIM_ConfigClockSource+0x11a>
 80024a0:	2b60      	cmp	r3, #96	; 0x60
 80024a2:	d877      	bhi.n	8002594 <HAL_TIM_ConfigClockSource+0x16c>
 80024a4:	2b50      	cmp	r3, #80	; 0x50
 80024a6:	d03c      	beq.n	8002522 <HAL_TIM_ConfigClockSource+0xfa>
 80024a8:	2b50      	cmp	r3, #80	; 0x50
 80024aa:	d873      	bhi.n	8002594 <HAL_TIM_ConfigClockSource+0x16c>
 80024ac:	2b40      	cmp	r3, #64	; 0x40
 80024ae:	d058      	beq.n	8002562 <HAL_TIM_ConfigClockSource+0x13a>
 80024b0:	2b40      	cmp	r3, #64	; 0x40
 80024b2:	d86f      	bhi.n	8002594 <HAL_TIM_ConfigClockSource+0x16c>
 80024b4:	2b30      	cmp	r3, #48	; 0x30
 80024b6:	d064      	beq.n	8002582 <HAL_TIM_ConfigClockSource+0x15a>
 80024b8:	2b30      	cmp	r3, #48	; 0x30
 80024ba:	d86b      	bhi.n	8002594 <HAL_TIM_ConfigClockSource+0x16c>
 80024bc:	2b20      	cmp	r3, #32
 80024be:	d060      	beq.n	8002582 <HAL_TIM_ConfigClockSource+0x15a>
 80024c0:	2b20      	cmp	r3, #32
 80024c2:	d867      	bhi.n	8002594 <HAL_TIM_ConfigClockSource+0x16c>
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d05c      	beq.n	8002582 <HAL_TIM_ConfigClockSource+0x15a>
 80024c8:	2b10      	cmp	r3, #16
 80024ca:	d05a      	beq.n	8002582 <HAL_TIM_ConfigClockSource+0x15a>
 80024cc:	e062      	b.n	8002594 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6818      	ldr	r0, [r3, #0]
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	6899      	ldr	r1, [r3, #8]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	f000 f95e 	bl	800279e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	609a      	str	r2, [r3, #8]
      break;
 80024fa:	e04f      	b.n	800259c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6818      	ldr	r0, [r3, #0]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	6899      	ldr	r1, [r3, #8]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	f000 f947 	bl	800279e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689a      	ldr	r2, [r3, #8]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800251e:	609a      	str	r2, [r3, #8]
      break;
 8002520:	e03c      	b.n	800259c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6818      	ldr	r0, [r3, #0]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	6859      	ldr	r1, [r3, #4]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	461a      	mov	r2, r3
 8002530:	f000 f8be 	bl	80026b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2150      	movs	r1, #80	; 0x50
 800253a:	4618      	mov	r0, r3
 800253c:	f000 f915 	bl	800276a <TIM_ITRx_SetConfig>
      break;
 8002540:	e02c      	b.n	800259c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6818      	ldr	r0, [r3, #0]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	6859      	ldr	r1, [r3, #4]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	461a      	mov	r2, r3
 8002550:	f000 f8dc 	bl	800270c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2160      	movs	r1, #96	; 0x60
 800255a:	4618      	mov	r0, r3
 800255c:	f000 f905 	bl	800276a <TIM_ITRx_SetConfig>
      break;
 8002560:	e01c      	b.n	800259c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6818      	ldr	r0, [r3, #0]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	6859      	ldr	r1, [r3, #4]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	461a      	mov	r2, r3
 8002570:	f000 f89e 	bl	80026b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2140      	movs	r1, #64	; 0x40
 800257a:	4618      	mov	r0, r3
 800257c:	f000 f8f5 	bl	800276a <TIM_ITRx_SetConfig>
      break;
 8002580:	e00c      	b.n	800259c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4619      	mov	r1, r3
 800258c:	4610      	mov	r0, r2
 800258e:	f000 f8ec 	bl	800276a <TIM_ITRx_SetConfig>
      break;
 8002592:	e003      	b.n	800259c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	73fb      	strb	r3, [r7, #15]
      break;
 8002598:	e000      	b.n	800259c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800259a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bc80      	pop	{r7}
 80025d8:	4770      	bx	lr

080025da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr

080025ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bc80      	pop	{r7}
 80025fc:	4770      	bx	lr
	...

08002600 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a25      	ldr	r2, [pc, #148]	; (80026a8 <TIM_Base_SetConfig+0xa8>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d007      	beq.n	8002628 <TIM_Base_SetConfig+0x28>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800261e:	d003      	beq.n	8002628 <TIM_Base_SetConfig+0x28>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a22      	ldr	r2, [pc, #136]	; (80026ac <TIM_Base_SetConfig+0xac>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d108      	bne.n	800263a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800262e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	4313      	orrs	r3, r2
 8002638:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a1a      	ldr	r2, [pc, #104]	; (80026a8 <TIM_Base_SetConfig+0xa8>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d007      	beq.n	8002652 <TIM_Base_SetConfig+0x52>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002648:	d003      	beq.n	8002652 <TIM_Base_SetConfig+0x52>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a17      	ldr	r2, [pc, #92]	; (80026ac <TIM_Base_SetConfig+0xac>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d108      	bne.n	8002664 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002658:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	4313      	orrs	r3, r2
 8002662:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	4313      	orrs	r3, r2
 8002670:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a07      	ldr	r2, [pc, #28]	; (80026a8 <TIM_Base_SetConfig+0xa8>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d103      	bne.n	8002698 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	615a      	str	r2, [r3, #20]
}
 800269e:	bf00      	nop
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr
 80026a8:	40012c00 	.word	0x40012c00
 80026ac:	40000400 	.word	0x40000400

080026b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b087      	sub	sp, #28
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	f023 0201 	bic.w	r2, r3, #1
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	011b      	lsls	r3, r3, #4
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f023 030a 	bic.w	r3, r3, #10
 80026ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	621a      	str	r2, [r3, #32]
}
 8002702:	bf00      	nop
 8002704:	371c      	adds	r7, #28
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr

0800270c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800270c:	b480      	push	{r7}
 800270e:	b087      	sub	sp, #28
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	f023 0210 	bic.w	r2, r3, #16
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002736:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	031b      	lsls	r3, r3, #12
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	4313      	orrs	r3, r2
 8002740:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002748:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	011b      	lsls	r3, r3, #4
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	4313      	orrs	r3, r2
 8002752:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	621a      	str	r2, [r3, #32]
}
 8002760:	bf00      	nop
 8002762:	371c      	adds	r7, #28
 8002764:	46bd      	mov	sp, r7
 8002766:	bc80      	pop	{r7}
 8002768:	4770      	bx	lr

0800276a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800276a:	b480      	push	{r7}
 800276c:	b085      	sub	sp, #20
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
 8002772:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002780:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4313      	orrs	r3, r2
 8002788:	f043 0307 	orr.w	r3, r3, #7
 800278c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	609a      	str	r2, [r3, #8]
}
 8002794:	bf00      	nop
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr

0800279e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800279e:	b480      	push	{r7}
 80027a0:	b087      	sub	sp, #28
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	60f8      	str	r0, [r7, #12]
 80027a6:	60b9      	str	r1, [r7, #8]
 80027a8:	607a      	str	r2, [r7, #4]
 80027aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027b8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	021a      	lsls	r2, r3, #8
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	431a      	orrs	r2, r3
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	609a      	str	r2, [r3, #8]
}
 80027d2:	bf00      	nop
 80027d4:	371c      	adds	r7, #28
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr

080027dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d101      	bne.n	80027f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027f0:	2302      	movs	r3, #2
 80027f2:	e041      	b.n	8002878 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2202      	movs	r2, #2
 8002800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800281a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	4313      	orrs	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a14      	ldr	r2, [pc, #80]	; (8002884 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d009      	beq.n	800284c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002840:	d004      	beq.n	800284c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a10      	ldr	r2, [pc, #64]	; (8002888 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d10c      	bne.n	8002866 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002852:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	68ba      	ldr	r2, [r7, #8]
 800285a:	4313      	orrs	r3, r2
 800285c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40012c00 	.word	0x40012c00
 8002888:	40000400 	.word	0x40000400

0800288c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	bc80      	pop	{r7}
 800289c:	4770      	bx	lr

0800289e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr

080028b0 <__errno>:
 80028b0:	4b01      	ldr	r3, [pc, #4]	; (80028b8 <__errno+0x8>)
 80028b2:	6818      	ldr	r0, [r3, #0]
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	20000064 	.word	0x20000064

080028bc <__libc_init_array>:
 80028bc:	b570      	push	{r4, r5, r6, lr}
 80028be:	2600      	movs	r6, #0
 80028c0:	4d0c      	ldr	r5, [pc, #48]	; (80028f4 <__libc_init_array+0x38>)
 80028c2:	4c0d      	ldr	r4, [pc, #52]	; (80028f8 <__libc_init_array+0x3c>)
 80028c4:	1b64      	subs	r4, r4, r5
 80028c6:	10a4      	asrs	r4, r4, #2
 80028c8:	42a6      	cmp	r6, r4
 80028ca:	d109      	bne.n	80028e0 <__libc_init_array+0x24>
 80028cc:	f000 f8f6 	bl	8002abc <_init>
 80028d0:	2600      	movs	r6, #0
 80028d2:	4d0a      	ldr	r5, [pc, #40]	; (80028fc <__libc_init_array+0x40>)
 80028d4:	4c0a      	ldr	r4, [pc, #40]	; (8002900 <__libc_init_array+0x44>)
 80028d6:	1b64      	subs	r4, r4, r5
 80028d8:	10a4      	asrs	r4, r4, #2
 80028da:	42a6      	cmp	r6, r4
 80028dc:	d105      	bne.n	80028ea <__libc_init_array+0x2e>
 80028de:	bd70      	pop	{r4, r5, r6, pc}
 80028e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80028e4:	4798      	blx	r3
 80028e6:	3601      	adds	r6, #1
 80028e8:	e7ee      	b.n	80028c8 <__libc_init_array+0xc>
 80028ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80028ee:	4798      	blx	r3
 80028f0:	3601      	adds	r6, #1
 80028f2:	e7f2      	b.n	80028da <__libc_init_array+0x1e>
 80028f4:	08002af8 	.word	0x08002af8
 80028f8:	08002af8 	.word	0x08002af8
 80028fc:	08002af8 	.word	0x08002af8
 8002900:	08002afc 	.word	0x08002afc

08002904 <malloc>:
 8002904:	4b02      	ldr	r3, [pc, #8]	; (8002910 <malloc+0xc>)
 8002906:	4601      	mov	r1, r0
 8002908:	6818      	ldr	r0, [r3, #0]
 800290a:	f000 b85f 	b.w	80029cc <_malloc_r>
 800290e:	bf00      	nop
 8002910:	20000064 	.word	0x20000064

08002914 <free>:
 8002914:	4b02      	ldr	r3, [pc, #8]	; (8002920 <free+0xc>)
 8002916:	4601      	mov	r1, r0
 8002918:	6818      	ldr	r0, [r3, #0]
 800291a:	f000 b80b 	b.w	8002934 <_free_r>
 800291e:	bf00      	nop
 8002920:	20000064 	.word	0x20000064

08002924 <memset>:
 8002924:	4603      	mov	r3, r0
 8002926:	4402      	add	r2, r0
 8002928:	4293      	cmp	r3, r2
 800292a:	d100      	bne.n	800292e <memset+0xa>
 800292c:	4770      	bx	lr
 800292e:	f803 1b01 	strb.w	r1, [r3], #1
 8002932:	e7f9      	b.n	8002928 <memset+0x4>

08002934 <_free_r>:
 8002934:	b538      	push	{r3, r4, r5, lr}
 8002936:	4605      	mov	r5, r0
 8002938:	2900      	cmp	r1, #0
 800293a:	d043      	beq.n	80029c4 <_free_r+0x90>
 800293c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002940:	1f0c      	subs	r4, r1, #4
 8002942:	2b00      	cmp	r3, #0
 8002944:	bfb8      	it	lt
 8002946:	18e4      	addlt	r4, r4, r3
 8002948:	f000 f8aa 	bl	8002aa0 <__malloc_lock>
 800294c:	4a1e      	ldr	r2, [pc, #120]	; (80029c8 <_free_r+0x94>)
 800294e:	6813      	ldr	r3, [r2, #0]
 8002950:	4610      	mov	r0, r2
 8002952:	b933      	cbnz	r3, 8002962 <_free_r+0x2e>
 8002954:	6063      	str	r3, [r4, #4]
 8002956:	6014      	str	r4, [r2, #0]
 8002958:	4628      	mov	r0, r5
 800295a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800295e:	f000 b8a5 	b.w	8002aac <__malloc_unlock>
 8002962:	42a3      	cmp	r3, r4
 8002964:	d90a      	bls.n	800297c <_free_r+0x48>
 8002966:	6821      	ldr	r1, [r4, #0]
 8002968:	1862      	adds	r2, r4, r1
 800296a:	4293      	cmp	r3, r2
 800296c:	bf01      	itttt	eq
 800296e:	681a      	ldreq	r2, [r3, #0]
 8002970:	685b      	ldreq	r3, [r3, #4]
 8002972:	1852      	addeq	r2, r2, r1
 8002974:	6022      	streq	r2, [r4, #0]
 8002976:	6063      	str	r3, [r4, #4]
 8002978:	6004      	str	r4, [r0, #0]
 800297a:	e7ed      	b.n	8002958 <_free_r+0x24>
 800297c:	461a      	mov	r2, r3
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	b10b      	cbz	r3, 8002986 <_free_r+0x52>
 8002982:	42a3      	cmp	r3, r4
 8002984:	d9fa      	bls.n	800297c <_free_r+0x48>
 8002986:	6811      	ldr	r1, [r2, #0]
 8002988:	1850      	adds	r0, r2, r1
 800298a:	42a0      	cmp	r0, r4
 800298c:	d10b      	bne.n	80029a6 <_free_r+0x72>
 800298e:	6820      	ldr	r0, [r4, #0]
 8002990:	4401      	add	r1, r0
 8002992:	1850      	adds	r0, r2, r1
 8002994:	4283      	cmp	r3, r0
 8002996:	6011      	str	r1, [r2, #0]
 8002998:	d1de      	bne.n	8002958 <_free_r+0x24>
 800299a:	6818      	ldr	r0, [r3, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	4401      	add	r1, r0
 80029a0:	6011      	str	r1, [r2, #0]
 80029a2:	6053      	str	r3, [r2, #4]
 80029a4:	e7d8      	b.n	8002958 <_free_r+0x24>
 80029a6:	d902      	bls.n	80029ae <_free_r+0x7a>
 80029a8:	230c      	movs	r3, #12
 80029aa:	602b      	str	r3, [r5, #0]
 80029ac:	e7d4      	b.n	8002958 <_free_r+0x24>
 80029ae:	6820      	ldr	r0, [r4, #0]
 80029b0:	1821      	adds	r1, r4, r0
 80029b2:	428b      	cmp	r3, r1
 80029b4:	bf01      	itttt	eq
 80029b6:	6819      	ldreq	r1, [r3, #0]
 80029b8:	685b      	ldreq	r3, [r3, #4]
 80029ba:	1809      	addeq	r1, r1, r0
 80029bc:	6021      	streq	r1, [r4, #0]
 80029be:	6063      	str	r3, [r4, #4]
 80029c0:	6054      	str	r4, [r2, #4]
 80029c2:	e7c9      	b.n	8002958 <_free_r+0x24>
 80029c4:	bd38      	pop	{r3, r4, r5, pc}
 80029c6:	bf00      	nop
 80029c8:	2000011c 	.word	0x2000011c

080029cc <_malloc_r>:
 80029cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ce:	1ccd      	adds	r5, r1, #3
 80029d0:	f025 0503 	bic.w	r5, r5, #3
 80029d4:	3508      	adds	r5, #8
 80029d6:	2d0c      	cmp	r5, #12
 80029d8:	bf38      	it	cc
 80029da:	250c      	movcc	r5, #12
 80029dc:	2d00      	cmp	r5, #0
 80029de:	4606      	mov	r6, r0
 80029e0:	db01      	blt.n	80029e6 <_malloc_r+0x1a>
 80029e2:	42a9      	cmp	r1, r5
 80029e4:	d903      	bls.n	80029ee <_malloc_r+0x22>
 80029e6:	230c      	movs	r3, #12
 80029e8:	6033      	str	r3, [r6, #0]
 80029ea:	2000      	movs	r0, #0
 80029ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029ee:	f000 f857 	bl	8002aa0 <__malloc_lock>
 80029f2:	4921      	ldr	r1, [pc, #132]	; (8002a78 <_malloc_r+0xac>)
 80029f4:	680a      	ldr	r2, [r1, #0]
 80029f6:	4614      	mov	r4, r2
 80029f8:	b99c      	cbnz	r4, 8002a22 <_malloc_r+0x56>
 80029fa:	4f20      	ldr	r7, [pc, #128]	; (8002a7c <_malloc_r+0xb0>)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	b923      	cbnz	r3, 8002a0a <_malloc_r+0x3e>
 8002a00:	4621      	mov	r1, r4
 8002a02:	4630      	mov	r0, r6
 8002a04:	f000 f83c 	bl	8002a80 <_sbrk_r>
 8002a08:	6038      	str	r0, [r7, #0]
 8002a0a:	4629      	mov	r1, r5
 8002a0c:	4630      	mov	r0, r6
 8002a0e:	f000 f837 	bl	8002a80 <_sbrk_r>
 8002a12:	1c43      	adds	r3, r0, #1
 8002a14:	d123      	bne.n	8002a5e <_malloc_r+0x92>
 8002a16:	230c      	movs	r3, #12
 8002a18:	4630      	mov	r0, r6
 8002a1a:	6033      	str	r3, [r6, #0]
 8002a1c:	f000 f846 	bl	8002aac <__malloc_unlock>
 8002a20:	e7e3      	b.n	80029ea <_malloc_r+0x1e>
 8002a22:	6823      	ldr	r3, [r4, #0]
 8002a24:	1b5b      	subs	r3, r3, r5
 8002a26:	d417      	bmi.n	8002a58 <_malloc_r+0x8c>
 8002a28:	2b0b      	cmp	r3, #11
 8002a2a:	d903      	bls.n	8002a34 <_malloc_r+0x68>
 8002a2c:	6023      	str	r3, [r4, #0]
 8002a2e:	441c      	add	r4, r3
 8002a30:	6025      	str	r5, [r4, #0]
 8002a32:	e004      	b.n	8002a3e <_malloc_r+0x72>
 8002a34:	6863      	ldr	r3, [r4, #4]
 8002a36:	42a2      	cmp	r2, r4
 8002a38:	bf0c      	ite	eq
 8002a3a:	600b      	streq	r3, [r1, #0]
 8002a3c:	6053      	strne	r3, [r2, #4]
 8002a3e:	4630      	mov	r0, r6
 8002a40:	f000 f834 	bl	8002aac <__malloc_unlock>
 8002a44:	f104 000b 	add.w	r0, r4, #11
 8002a48:	1d23      	adds	r3, r4, #4
 8002a4a:	f020 0007 	bic.w	r0, r0, #7
 8002a4e:	1ac2      	subs	r2, r0, r3
 8002a50:	d0cc      	beq.n	80029ec <_malloc_r+0x20>
 8002a52:	1a1b      	subs	r3, r3, r0
 8002a54:	50a3      	str	r3, [r4, r2]
 8002a56:	e7c9      	b.n	80029ec <_malloc_r+0x20>
 8002a58:	4622      	mov	r2, r4
 8002a5a:	6864      	ldr	r4, [r4, #4]
 8002a5c:	e7cc      	b.n	80029f8 <_malloc_r+0x2c>
 8002a5e:	1cc4      	adds	r4, r0, #3
 8002a60:	f024 0403 	bic.w	r4, r4, #3
 8002a64:	42a0      	cmp	r0, r4
 8002a66:	d0e3      	beq.n	8002a30 <_malloc_r+0x64>
 8002a68:	1a21      	subs	r1, r4, r0
 8002a6a:	4630      	mov	r0, r6
 8002a6c:	f000 f808 	bl	8002a80 <_sbrk_r>
 8002a70:	3001      	adds	r0, #1
 8002a72:	d1dd      	bne.n	8002a30 <_malloc_r+0x64>
 8002a74:	e7cf      	b.n	8002a16 <_malloc_r+0x4a>
 8002a76:	bf00      	nop
 8002a78:	2000011c 	.word	0x2000011c
 8002a7c:	20000120 	.word	0x20000120

08002a80 <_sbrk_r>:
 8002a80:	b538      	push	{r3, r4, r5, lr}
 8002a82:	2300      	movs	r3, #0
 8002a84:	4d05      	ldr	r5, [pc, #20]	; (8002a9c <_sbrk_r+0x1c>)
 8002a86:	4604      	mov	r4, r0
 8002a88:	4608      	mov	r0, r1
 8002a8a:	602b      	str	r3, [r5, #0]
 8002a8c:	f7fe fb9c 	bl	80011c8 <_sbrk>
 8002a90:	1c43      	adds	r3, r0, #1
 8002a92:	d102      	bne.n	8002a9a <_sbrk_r+0x1a>
 8002a94:	682b      	ldr	r3, [r5, #0]
 8002a96:	b103      	cbz	r3, 8002a9a <_sbrk_r+0x1a>
 8002a98:	6023      	str	r3, [r4, #0]
 8002a9a:	bd38      	pop	{r3, r4, r5, pc}
 8002a9c:	20000174 	.word	0x20000174

08002aa0 <__malloc_lock>:
 8002aa0:	4801      	ldr	r0, [pc, #4]	; (8002aa8 <__malloc_lock+0x8>)
 8002aa2:	f000 b809 	b.w	8002ab8 <__retarget_lock_acquire_recursive>
 8002aa6:	bf00      	nop
 8002aa8:	2000017c 	.word	0x2000017c

08002aac <__malloc_unlock>:
 8002aac:	4801      	ldr	r0, [pc, #4]	; (8002ab4 <__malloc_unlock+0x8>)
 8002aae:	f000 b804 	b.w	8002aba <__retarget_lock_release_recursive>
 8002ab2:	bf00      	nop
 8002ab4:	2000017c 	.word	0x2000017c

08002ab8 <__retarget_lock_acquire_recursive>:
 8002ab8:	4770      	bx	lr

08002aba <__retarget_lock_release_recursive>:
 8002aba:	4770      	bx	lr

08002abc <_init>:
 8002abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002abe:	bf00      	nop
 8002ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ac2:	bc08      	pop	{r3}
 8002ac4:	469e      	mov	lr, r3
 8002ac6:	4770      	bx	lr

08002ac8 <_fini>:
 8002ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aca:	bf00      	nop
 8002acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ace:	bc08      	pop	{r3}
 8002ad0:	469e      	mov	lr, r3
 8002ad2:	4770      	bx	lr
